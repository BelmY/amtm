#!/bin/sh
#bof

# Set environment PATH to system binaries
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:$PATH

# Proudly coded by thelonelycoder/decoderman
# Copyright (C) 2016-2019 thelonelycoder - All Rights Reserved
# https://www.snbforums.com/members/thelonelycoder.25480/
# https://github.com/decoderman

# How to install on Asuswrt-Merlin
# Enter this into your favorite SSH terminal, without the leading "#":
# /usr/sbin/curl -Os https://raw.githubusercontent.com/decoderman/amtm/master/amtm && sh amtm

# amtm is free to use under the GNU General Public License version 3 (GPL-3.0)
# https://opensource.org/licenses/GPL-3.0

# Version, release date
version=1.7
release="January 27 2019"
title="SNBForum Asuswrt-Merlin Terminal Menu"
thisScript=amtm

ascii_logo(){
	echo "              _"
	echo "   ____ ____ | |_  ____"
	echo "  / _  |    \|  _)|    \ "
	echo " ( ( | | | | | |__| | | |"
	echo "  \_||_|_|_|_|\___)_|_|_|"
	echo
}

# Functions follow
about_amtm(){
	echo
	print_end_line
	echo " $thisScript, the $title
 Version $version, released on $release

 amtm is a shortcut manager for popular scripts
 for wireless routers running Asuswrt-Merlin firmware.

 For updates and discussion visit this thread:
 https://www.snbforums.com/threads/amtm-the-snbforums-asuswrt-merlin-terminal-menu.42415/

 Author: thelonelycoder/decoderman
 https://github.com/decoderman/amtm
 https://www.snbforums.com/members/thelonelycoder.25480/
 https://github.com/decoderman

 Contributor: Adamm
 https://www.snbforums.com/members/adamm.19554/

 Legal Boilerplate:
 $thisScript is free to use under the GNU General
 Public License, version 3 (GPL-3.0).
 https://opensource.org/licenses/GPL-3.0

 Copyright (C) 2016-2019 thelonelycoder - All Rights Reserved"
	print_end_line
	press_enter_to "return to menu"
	show_amtm menu
}

print_info_line(){ echo;echo "${RED_LINE}_________________| INFO |__________________${NC}";echo;}
print_end_line(){ echo "${RED_LINE}___________________________________________${NC}";echo;}
press_enter_to(){ printf "\\n Press [Enter] to $1 ";read -r;echo;}
continue_dialog(){
	echo
	print_end_line
	while true;do
		printf " Continue? [1=Yes e=Exit] ";read -r continue
		case "$continue" in
			1)		echo;break;;
			[Ee])	show_amtm menu;break;;
			*)		printf "\\n input is not an option\\n\\n";;
		esac
	done
}

install_amtm(){
	mkdir -p "/jffs/scripts"

	if [ "$(nvram get jffs2_scripts)" != "1" ]; then
		nvram set jffs2_scripts=1
		nvram commit
	fi

	# install to /jffs/scripts/$thisScript
	[ ! -f "/jffs/scripts/$thisScript" ] && cp "$0" /jffs/scripts/$thisScript
	chmod 0755 /jffs/scripts/$thisScript
	message="/jffs/scripts/$thisScript"

	# add link to /opt/bin whenever found, will be re-checked at every start further down
	if [ -d "/opt/bin" ] && [ ! -f "/opt/bin/$thisScript" ]; then
		ln -s /jffs/scripts/$thisScript /opt/bin
		chmod 0755 /opt/bin/$thisScript
		message="/jffs/scripts/$thisScript\\n\\n or simply with:\\n $thisScript"
	fi

	if [ "$0" = "/jffs/scripts/$thisScript" ]; then
		subshell=
	else
		subshell="exec"
		rm -f "$0"
	fi
	"$subshell" /jffs/scripts/$thisScript " $title\\n successfully installed!\\n\\n You can start $thisScript with:\\n $message"
}

remove_amtm(){
	print_info_line
	echo " Do you want to remove $thisScript now?"
	echo
	echo " Note that removing $thisScript will not remove or"
	echo " uninstall any installed SNBForum scripts."
	echo
	echo " It will, however, remove the Disk check"
	echo " script/log, along with the Format disk log."
	continue_dialog
	if [ -f /jffs/scripts/disk-check ]; then
		sed -i '\~/jffs/scripts/disk-check ~d' /jffs/scripts/pre-mount
		rm -f /jffs/scripts/disk-check
		rm -f /jffs/amtm-disk-check.log
	fi
	[ -f "/jffs/amtm-format-disk.log" ] && rm -f /jffs/amtm-format-disk.log
	rm -f /opt/bin/$thisScript
	rm -f /jffs/scripts/$thisScript
	rm -f "$0"
	echo " Removed all traces of $thisScript"
	echo
	exit 0
}

update_amtm(){
	remoteurl="https://raw.githubusercontent.com/decoderman/amtm/master/amtm"
	curl -fsN --retry 3 "$remoteurl" | grep -qF "version=" || show_amtm " Update aborted,\\n could not retrieve version"
	remotever="$(curl -fsN --retry 3 "$remoteurl" | grep "^version=" | sed -e 's/version=//')"

	if [ "$version" = "$remotever" ]; then
		print_info_line
		echo " No new version is available,"
		echo " do you want to update anyway?"
		continue_dialog
		curl -fs --retry 3 "$remoteurl" -o "$0" && exec "$0" " $title\\n force updated to v$remotever"
	fi

	if [ "$version" != "$remotever" ]; then
		print_info_line
		echo " An update is available:"
		echo " From v$version to v$remotever"
		echo
		echo " Do you want to update now?"
		continue_dialog
		curl -fs --retry 3 "$remoteurl" -o "$0" && exec "$0" " $title\\n updated from v$version to v$remotever"
	fi
}

# recheck when /opt/bin has become available
recheck_opt(){
	if [ -d "/opt/bin" ] && [ ! -f "/opt/bin/$thisScript" ] && [ -f "/jffs/scripts/$thisScript" ]; then
		ln -s /jffs/scripts/$thisScript /opt/bin
		chmod 0755 /opt/bin/$thisScript
		show_amtm " /opt/bin detected!\\n\\n You can now start $thisScript with:\\n /jffs/scripts/$thisScript\\n\\n or simply with:\\n $thisScript"
	fi
}

# sw) create or delete Swap file
manage_swap(){
if [ "$1" = "create" ]; then
	echo
	while true;do
		case "$continue" in
			1)	clear
				print_end_line
				echo
				echo " Listing compatible device(s) for"
				echo " a Swap file:"
				echo
				i=1;noad=
				for mounted in $(/bin/mount | grep -E "ext2|ext3|ext4|tfat|exfat" | cut -d" " -f3); do
					echo " $i. ${GREEN_BG}$mounted${NC}"
					eval mounts$i=\"$mounted\"
					noad="${noad}${i} "
					i=$(( i + 1 ))
				done

				if [ "$i" = "1" ]; then
					show_amtm " No compatible device available."
				fi

				[ "$i" = "2" ] && devNo=1-1 || devNo="1-$((i-1))"
				while true;do
					printf "\\n Select device [$devNo e=Exit] ";read -r device
					case "$device" in
						[$noad])	break;;
						[Ee])		show_amtm " Exited Swap file function";break;;
						*)			printf "\\n input is not an option\\n";;
					esac
				done

				eval swapDevice="\$mounts$device"

				echo " creating Swap file on: ${GREEN_BG}${swapDevice:?}${NC}"
				while true;do
					printf "\\n Continue? [1=Yes e=Exit] ";read -r swaps
					case "$swaps" in
						1)	clear
							print_end_line
							echo
							echo " Select a Swap file size:"
							echo
							echo " 1. --> 256MB"
							echo " 2. --> 512MB"
							echo " 3. -->   1GB"
							echo " 4. -->   2GB"

							while true; do
								printf "\\n Enter size [1-4 e=Exit] ";read -r size
								case "$size" in
									1)	swapsize=262144;break;;
									2)	swapsize=524288;break;;
									3)	swapsize=1048576;break;;
									4)	swapsize=2097152;break;;
								 [Ee])	show_amtm menu;break;;
									*)	printf "\\n input is not an option\\n";;
								esac
							done
							echo
							if [ "$(df "$swapDevice" | xargs | awk '{print $11}')" -le "$swapsize" ]; then
								echo " Not enough free space available on:"
								echo " $swapDevice"
								press_enter_to "select another device"
								read -r;echo
								clear
								print_end_line
								manage_swap create
							fi
							echo " Creating the Swap file,"
							echo " this will take some time..."
							echo
							dd if=/dev/zero of="$swapDevice/myswap.swp" bs=1k count="$swapsize"
							mkswap "$swapDevice/myswap.swp"
							swapon "$swapDevice/myswap.swp"
							nvram set usb_idle_timeout=0
							nvram commit
							if [ ! -f "/jffs/scripts/post-mount" ]; then
								echo "#!/bin/sh" > /jffs/scripts/post-mount
							elif [ -f "/jffs/scripts/post-mount" ] && ! head -1 /jffs/scripts/post-mount | grep -qE "^#!/bin/sh"; then
								sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/post-mount
							fi
							echo "swapon $swapDevice/myswap.swp # Swap file created by $thisScript" >> /jffs/scripts/post-mount
							show_amtm " Swap file created at:\\n $swapDevice/myswap.swp";break;;
					[Ee])	show_amtm menu;break;;
						*)  printf "\\n input is not an option\\n";;
					esac
				done;break;;
		 [Ee])	show_amtm menu;break;;
			*)	printf "\\n input is not an option\\n";;
		esac
	done

elif [ "$1" = "delete" ]; then
	swaplocation="$(grep -o "swapon .*" /jffs/scripts/post-mount | awk '{print $2}')"
	echo
	echo " Swap file found at:"
	echo " $swaplocation"

	while true;do
		printf "\\n Delete the Swap file? [1=Yes e=Exit] ";read -r continue
		case "$continue" in
			1)		if [ -f "$swaplocation" ]; then
						swapoff "$swaplocation"
						rm -rf "$swaplocation"
						sed -i '\~swapon ~d' /jffs/scripts/post-mount
						show_amtm " Swap file deleted:\\n $swaplocation"
					else
						show_amtm " No Swap file found at\\n $swaplocation"
					fi
					break;;
			[Ee])	show_amtm menu;break;;
			*)		printf "\\n input is not an option\\n";;
		esac
	done

elif [ "$1" = "check" ]; then
	swapFile="$(find /mnt/*/myswap.swp 2> /dev/null)"
	if [ "$swapFile" ]; then
		echo
		echo " Swap file found at:"
		echo " ${GREEN_BG}$swapFile${NC}"
		press_enter_to "to fix the path"
		sed -i '\~swapon ~d' /jffs/scripts/post-mount
		echo "swapon $swapFile # Swap file created by $thisScript" >> /jffs/scripts/post-mount
		swapon "$swapFile" 2> /dev/null
		show_amtm " Swap file path changed to\\n $swapFile"
	else
		echo
		echo " No Swap file found."
		press_enter_to "remove reference"
		echo " in /jffs/scripts/post-mount now."
		sed -i '\~swapon ~d' /jffs/scripts/post-mount
		show_amtm " Incorrect Swap file reference removed"
	fi
fi
}

# dc) install or remove disk check at boot
disk_check(){
if [ -f "/jffs/scripts/pre-mount" ] && grep -q "e2fsck -p" /jffs/scripts/pre-mount; then
	show_amtm " Unsupported pre-mount script found,\\n please remove file manually."
else

	if [ "$1" = "install" ]; then

		cat <<-EOF > /jffs/scripts/disk-check
		#!/bin/sh
		# auto-check filesystems during boot
		# generated by amtm $version

		if [ -f "/jffs/amtm-disk-check.log" ] && [ "\$(wc -c < /jffs/amtm-disk-check.log)" -gt "1000000" ]; then
		   sed -i '1,1000d' "/jffs/amtm-disk-check.log"
		   sed -i "1s/^/Truncated log file, size over 1MB, on \$(date)\n\n/" "/jffs/amtm-disk-check.log"
		   logger -t amtm "Truncated /jffs/amtm-disk-check.log, size over 1MB"
		fi

		FSTYPE=\$(fdisk -l \${1:0:8} | grep \$1 | cut -c55-65)

		case "\$FSTYPE" in
		   Linux*) CHKCMD="e2fsck -p";;
		   Win95* | FAT*) CHKCMD="fatfsck -a";;
		   HPFS/NTFS) CHKCMD="ntfsck -a";;
		   *) logger -t amtm "Disk check: Unknown filesystem type \$FSTYPE on \$1 - skipping check."
		      printf "\\n\$(date) Unknown filesystem type \$FSTYPE on \$1 - skipping check.\\n" >> /jffs/amtm-disk-check.log
		      exit 1;;
		esac

		logger -t amtm "Running disk check '\$CHKCMD' on \$1"
		printf "\\n\$(date) Starting '\$CHKCMD \$1'\\n" >> /jffs/amtm-disk-check.log
		\$CHKCMD \$1 >> /jffs/amtm-disk-check.log 2>&1
		logger -t amtm "Disk check done on \$1"

		EOF

		if [ ! -f "/jffs/scripts/pre-mount" ]; then
			echo "#!/bin/sh" > /jffs/scripts/pre-mount
		elif [ -f "/jffs/scripts/pre-mount" ] && ! head -1 /jffs/scripts/pre-mount | grep -qE "^#!/bin/sh"; then
			sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/pre-mount
		fi
		if ! grep -q ". /jffs/scripts/disk-check" /jffs/scripts/pre-mount; then
			echo ". /jffs/scripts/disk-check # Added by $thisScript" >> /jffs/scripts/pre-mount
		fi
		chmod 0755 /jffs/scripts/pre-mount /jffs/scripts/disk-check

	elif [ "$1" = "remove" ]; then
		print_info_line
		printf " This removes the Disk check script and\\n its log file.\\n"
		continue_dialog
		sed -i '\~/jffs/scripts/disk-check ~d' /jffs/scripts/pre-mount
		rm -f /jffs/scripts/disk-check
		rm -f /jffs/amtm-disk-check.log

	elif [ "$1" = "log" ]; then
		if [ -f "/jffs/amtm-disk-check.log" ]; then
			echo
			echo " ---------------------------------------------------"
			printf " /jffs/amtm-disk-check.log has this content:\\n\\n"
			echo " START FILE, --- lines are not part of file"
			echo " ---------------------------------------------------"
			sed -e 's/^/ /' /jffs/amtm-disk-check.log
			echo " ---------------------------------------------------"
			echo " END FILE"
			press_enter_to "return to menu"
		else
			show_amtm " No disk check log found (yet)."
		fi
	fi
fi
}

# fd) Format disk
format_disk(){
	select_device(){
		print_end_line
		echo " Select your device to format"
		echo
		echo " ${ERR_BG} Again, this will erase all data and ${NC}"
		echo " ${ERR_BG} partitions on the selected device! ${NC}"
		echo

		pto=4;pts=4
		case "$(uname -m)" in
			mips)		PART_TYPES='ext2|ext3|fat|tntfs';pto=3;pts=;;
			armv7l)		PART_TYPES='ext2|ext3|ext4|fat|tntfs';;
			aarch64)	PART_TYPES='ext2|ext3|ext4|fat|tntfs';;
		esac

		i=1;noad=
		for mounted in $(/bin/mount | grep -E "$PART_TYPES" | cut -d" " -f3); do
			echo " $i. ${GREEN_BG} $mounted ${NC}"
			eval mounts$i=\"$mounted\"
			noad="${noad}${i} "
			i=$((i+1))
		done

		if [ "$i" = "1" ]; then
			oktypes=$(echo $PART_TYPES | sed -e 's/|/, /g;s/tntfs/ntfs/')
			show_amtm " No compatible device(s) found to format.\\n Only $oktypes formats\\n are supported.\\n"
		fi

		[ "$i" = "2" ] && devNo=1-1 || devNo="1-$((i-1))"
		while true;do
			printf "\\n Select device [$devNo e=Exit] ";read -r device
			case "$device" in
				[$noad])	break;;
				[Ee])		show_amtm " Exited Format disk function";break;;
				*)			printf "\\n input is not an option\\n";;
			esac
		done

		eval mtddev="\$mounts$device"

		devtf=$(df "$mtddev" | xargs | awk '{print $8}')
		devtfsize=$(fdisk -l | grep -w "${devtf:0:8}" | awk '{print $5}')

		if [ "$devtfsize" ] && [ "$devtfsize" -gt 2000000000000 ]; then
			show_amtm " Device is over 2TB and cannot be\\n formatted by $thisScript."
		fi

		print_end_line
		echo " You selected the following device:"
		echo
		echo " ${GREEN_BG} $mtddev ${NC}"
		echo
		echo " This will delete ALL of the following:"
		echo
		echo "$(/bin/mount | grep "^${devtf:0:8}" | awk -v RED="${ERR_BG}" -v NC="${NC}" '{print " "RED" "$1" "NC" mounted as "RED" "$3" "NC}')"
		echo

		printf " 1. Continue\\n 2. Return to device selection\\n"
		while true;do
			printf "\\n Enter selection [1-2 e=Exit] ";read -r continue
			case "$continue" in
				1)		break;;
				2)		select_device;break;;
				[Ee])	show_amtm " Exited Format disk function";;
				*)		printf "\\n input is not an option\\n";;
			esac
		done
	}
	select_device

	print_end_line
	printf " Select new filesystem\\n\\n"
	printf " 2. ext2\\n 3. ext3\\n"
	[ "$pto" = "4" ] && printf " 4. ext4\\n"
	while true;do
		printf "\\n Set filesystem [2-$pto] ";read -r continue
		case "$continue" in
			2)		nfs=ext2;break;;
			3)		nfs=ext3;break;;
			[$pts])	nfs=ext4;break;;
			*)		printf "\\n input is not an option\\n";;
		esac
	done

	if [ "$nfs" = "ext3" ] || [ "$nfs" = "ext4" ]; then
		print_end_line
		printf " Do you want to enable journalling?\\n\\n"
		printf " 1. No journalling\\n 2. Enable journalling\\n"
		while true;do
			printf "\\n Enter selection [1-2] ";read -r continue
			case "$continue" in
				1)	journalling=off;break;;
				2)	journalling=on;break;;
				*)	printf "\\n input is not an option\\n";;
			esac
		done
	fi

	select_label(){
		print_end_line
		printf " Do you want to set a device label?\\n\\n"
		printf " 1. No label\\n 2. Set label\\n"
		while true;do
			printf "\\n Enter selection [1-2] ";read -r continue
			case "$continue" in
				1)	label=;break;;
				2)	printf "\\n Enter label: ";read -r label
					print_end_line
					echo " You entered this label: ${GREEN_BG} $label ${NC}"
					echo
					echo " Is this correct?"
					echo
					printf " 1. Yes, continue\\n 2. No, back to label selection\\n"
					while true;do
						printf "\\n Enter selection [1-2] ";read -r continue
						case "$continue" in
							1)	break;;
							2)	label=;select_label;break;;
							*)	printf "\\n input is not an option\\n";;
						esac
					done
					break;;
				*)	printf "\\n input is not an option\\n";;
			esac
		done
	}
	select_label

	print_end_line
	echo " Formatting $mtddev now!"
	echo
	echo " Unmounting device(s)"

	swapoff -a

	sleep 2

	rc=0
	for mounted in $(/bin/mount | grep "^${devtf:0:8}" | cut -d" " -f1); do
		umount "$mounted"
		rc=$((rc+$?))
	done

	if [ "$rc" -eq "0" ]; then
		format_device(){
			echo
			echo " Zeroing disk and creating partition on $mtddev"
			echo "${GRAY}"

			dd if=/dev/zero of=${devtf:0:8} count=16065 bs=512 && sync

			sleep 2

			echo "o
			n
			p
			1


			w" | fdisk ${devtf:0:8}

			echo
			if [ "$nfs" = "ext2" ]; then
				echo "${NC} Formatting disk as \"$nfs\"${GRAY}"
				echo
				mke2fs -t $nfs ${devtf:0:8}1
			elif [ "$journalling" = "on" ]; then
				echo "${NC} Formatting as \"$nfs\", enabling journalling${GRAY}"
				echo
				mke2fs -t $nfs -O has_journal ${devtf:0:8}1
			else
				echo "${NC} Formatting disk as \"$nfs\"${GRAY}"
				echo
				mke2fs -t $nfs -O ^has_journal ${devtf:0:8}1
			fi

			if [ "$label" ]; then
				echo "${NC} Setting device label \"$label\"${GRAY}"
				echo
				tune2fs -L "$label" ${devtf:0:8}1
			fi
			echo "${NC}"
		}

		echo "$thisScript format disk log $(date -R)" >"/jffs/amtm-format-disk.log"
		format_device | tee -a "/jffs/amtm-format-disk.log"

		print_end_line
		printf " Done formatting device\\n\\n"
		echo " The log file can be viewed with ${GREEN_BG}fdl${NC}"
		printf "\\n Your router will now reboot for\\n"
		printf " the changes to take effect\\n"
		press_enter_to continue
		reboot;exit 0
	else
		echo
		echo " ${ERR_BG} Filesystem(s) did not unmount ${NC}"
		echo " ${ERR_BG} See error above for reason ${NC}"
		press_enter_to "return to menu"
		show_amtm " Formatting failed:\\n Filesystem(s) did not unmount."
	fi

}

format_disk_log(){
	if [ -f "/jffs/amtm-format-disk.log" ]; then
		echo
		echo " ---------------------------------------------------"
		printf " /jffs/amtm-format-disk.log has this content:\\n\\n"
		echo " START FILE, --- lines are not part of file"
		echo " ---------------------------------------------------"
		sed -e 's/^/ /' /jffs/amtm-format-disk.log
		echo " ---------------------------------------------------"
		echo " END FILE"
		press_enter_to "return to menu"
	else
		show_amtm " No format disk log found (yet)."
	fi
}

# 3) Install Entware
install_Entware(){
	NAME="$thisScript Entware installer"
	check_entware_folder(){
		if [ "$(/opt/bin/find /tmp/mnt/*/ -maxdepth 1 -type d -name "entware*" 2>/dev/null | wc -l)" -gt "1" ]; then
			/opt/bin/find /tmp/mnt/*/ -maxdepth 1 -type d -name "entware*" | while read fdir; do
				if [ "$fdir" != "$(readlink /tmp/opt)" ] && [ -f "$fdir/bin/opkg" ]; then
					mv "$fdir" "$(dirname "$fdir")/old.$(basename "$fdir")"
				fi
			done
		fi
	}

	write_jffsfile(){
		check_nl(){ [ "$(tail -c1 "${1}"; echo x)" != "$'\nx'" ] && echo >>"${1}";}

		echo " Checking /jffs/scripts entries"

		if [ ! -f "/jffs/scripts/post-mount" ]; then
			echo "#!/bin/sh" >/jffs/scripts/post-mount
		elif [ -f "/jffs/scripts/post-mount" ] && ! head -1 /jffs/scripts/post-mount | grep -qE "^#!/bin/sh"; then
			sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/post-mount
		fi
		if ! grep -q ". /jffs/scripts/post-mount.div" /jffs/scripts/post-mount; then
			check_nl /jffs/scripts/post-mount
			echo ". /jffs/scripts/post-mount.div # Added by $NAME" >>/jffs/scripts/post-mount
			echo " post-mount entry added"
		else
			echo " OK post-mount"
		fi

		if [ ! -f "/jffs/scripts/services-stop" ]; then
			echo "#!/bin/sh" >/jffs/scripts/services-stop
		elif [ -f "/jffs/scripts/services-stop" ] && ! head -1 /jffs/scripts/services-stop | grep -qE "^#!/bin/sh"; then
			sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/services-stop
		fi
		if ! grep -q "/opt/etc/init.d/rc.unslung stop" /jffs/scripts/services-stop; then
			check_nl /jffs/scripts/services-stop
			echo "/opt/etc/init.d/rc.unslung stop # Added by $NAME" >>/jffs/scripts/services-stop
			echo " services-stop entry added"
		else
			echo " OK services-stop"
		fi

		if [ ! -f "/jffs/scripts/post-mount.div" ]; then
			cat <<-EOF > /jffs/scripts/post-mount.div
			#!/bin/sh

			# Added by $NAME

			OF="\$(/usr/bin/find \$1/entware*/bin/opkg 2> /dev/null)"

			if [ "\$OF" ]; then
				   ln -nsf "\$(echo "\$OF" | sed 's~/bin/opkg~~g')" /tmp/opt
				   /opt/etc/init.d/rc.unslung start \$0
			fi
			EOF
			echo " post-mount.div created"
		else
			echo " OK post-mount.div"
		fi
		chmod 0755 /jffs/scripts/post-mount /jffs/scripts/services-stop /jffs/scripts/post-mount.div
	}

	check_device(){
		check_device_nok(){
		rm -rf "$1/rw_test"
		show_amtm " $1\\n has not passed the device test.\\n Check if device is read and writable."
		}

		mkdir -p $1/rw_test
		if [ -d "$1/rw_test" ]; then
			echo "rwTest=OK" >"$1/rw_test/rw_test.txt"
			if [ -f "$1/rw_test/rw_test.txt" ]; then
				. "$1/rw_test/rw_test.txt"
				if [ "$rwTest" = "OK" ]; then
					rm -rf "$1/rw_test"
				else
					check_device_nok "$1"
				fi
			else
				check_device_nok "$1"
			fi
		else
			check_device_nok "$1"
		fi
	}

	case "$(uname -m)" in
		mips)		PART_TYPES='ext2|ext3'
					INST_URL='http://pkg.entware.net/binaries/mipsel/installer/installer.sh'
					entVer="Entware (mipsel)";;
		armv7l)		PART_TYPES='ext2|ext3|ext4'
					INST_URL='http://bin.entware.net/armv7sf-k2.6/installer/generic.sh'
					entVer="Entware (armv7)";;
		aarch64)	PART_TYPES='ext2|ext3|ext4'
					INST_URL='http://bin.entware.net/aarch64-k3.10/installer/generic.sh'
					entVer="Entware (aarch64)";;
		*)			show_amtm " $(uname -m) is an unsupported platform to install Entware on.";;
	esac

	echo " Running pre-install checks"

	if [ -L "/tmp/opt" ]; then
		# dl master check
		if [ "$(nvram get apps_mounted_path)" ] && [ -d "$(nvram get apps_mounted_path)/$(nvram get apps_install_folder)" ]; then
			if [ -f "/opt/etc/init.d/S50downloadmaster" ]; then
				echo "${ERR_BG} Download Master appears to be installed ${NC}"
				echo " $(nvram get apps_mounted_path)/$(nvram get apps_install_folder)"
				echo " Entware and Download Master cannot be installed at the same time."
				echo " Uninstall Download Master in 'USB Application' first."

				echo
				echo "${ERR_BG} Correct above error first before installing Entware ${NC}"
				press_enter_to acknowledge
				show_amtm " Correct error first before installing Entware."
			else
				echo "${ERR_BG} Correcting invalid Entware or Download Master settings ${NC}"
				if [ -L "/tmp/opt" ]; then
					rm -f /tmp/opt 2> /dev/null
					rm -f /opt 2> /dev/null
				fi
				if [ -d "$(nvram get apps_mounted_path)/$(nvram get apps_install_folder)" ]; then
					rm -rf "$(nvram get apps_mounted_path)/$(nvram get apps_install_folder)"
				fi
				nvram set apps_mounted_path=
				nvram set apps_dev=
				nvram set apps_state_autorun=
				nvram set apps_state_enable=
				nvram set apps_state_install=
				nvram set apps_state_switch=
				nvram commit
			fi
		else
			if [ -L "/tmp/opt" ]; then
				rm -f /tmp/opt 2> /dev/null
				rm -f /opt 2> /dev/null
			fi
			echo "${ERR_BG} Corrected invalid Entware symlink ${NC}"
		fi
	fi

	echo " Pre-install checks passed"

	print_end_line
	echo " Select device to install Entware to"
	echo

	i=1;noad=
	for mounted in $(/bin/mount | grep -E "$PART_TYPES" | cut -d" " -f3); do
		echo " $i. ${GREEN}$mounted${NC}"
		eval mounts$i="$mounted"
		noad="${noad}${i} "
		i=$((i+1))
	done

	if [ "$i" = "1" ]; then
		show_amtm " No compatible device(s) found to install\\n Entware on. A USB storage device formatted\\n with one of these file systems is required:\\n $(echo $PART_TYPES | sed -e 's/|/, /g')\\n Use Format disk (fd) to format FAT or NTFS\\n formatted devices to ext*."
	fi

	[ "$i" = "2" ] && devNo=1-1 || devNo="1-$((i-1))"
	while true;do
		printf "\\n Select device [$devNo e=Exit] ";read -r device
		case "$device" in
			[$noad])	break;;
			[Ee])		show_amtm " Exited Entware install function";break;;
			*)			printf "\\n input is not an option\\n";;
		esac
	done

	echo
	eval entDev="\$mounts$device"

	echo " Running device checks on $entDev"

	check_device "$entDev"

	echo " Device checks passed"

	if [ "$(uname -m)" = "aarch64" ]; then
		print_end_line
		printf " Select Entware version\\n\\n"
		printf " This router can run 32bit or 64bit Entware.\\n"
		printf " Unless you have a specific reason, the\\n"
		printf " 64-bit version is recommended.\\n\\n"
		printf " 1. 64-bit Entware\\n"
		printf " 2. 32-bit Entware\\n"
		while true;do
			printf "\\n Enter your selection [1-2] ";read -r eversion
			case "$eversion" in
				1)	INST_URL='http://bin.entware.net/aarch64-k3.10/installer/generic.sh'
					entVer="Entware (aarch64)";break;;
				2)	INST_URL='http://bin.entware.net/armv7sf-k3.2/installer/generic.sh'
					entVer="Entware (armv7)";break;;
				*) 	printf "\\n input is not an option\\n";;
			esac
		done
	fi

	print_end_line
	echo " amtm is now ready to install Entware to"
	echo
	echo " ${GREEN_BG} $entDev ${NC}"
	echo
	printf " 1. Continue\\n 2. Return to device selection\\n"
	while true;do
		printf "\\n Enter selection [1-2 e=Exit] ";read -r continue
		case "$continue" in
			1)		break;;
			2)		echo;install_Entware;break;;
			[Ee])	show_amtm " Exited Entware install function";;
			*)		printf "\\n input is not an option\\n";;
		esac
	done

	echo
	cd /tmp

	entPath="$entDev/entware"
	[ -d "$entPath" ] && rm -rf "$entPath"

	echo " Creating install directory at $entPath"

	mkdir -p "$entPath"

	ln -sf "$entPath" /tmp/opt

	echo
	echo " Installing $entVer, using external script"
	echo "${GRAY}"
	wget --timeout=10 --tries=3 --retry-connrefused -qO - "$INST_URL" | sh
	echo "${NC}"

	if [ -f "/opt/bin/opkg" ]; then
		ENTURL="$(awk 'NR == 1 {print $3}' /opt/etc/opkg.conf)"
		[ "$(echo $ENTURL | grep 'aarch64\|armv7\|mipsel')" ] && entVersion="Entware (${ENTURL##*/})"
		[ -z "$entVersion" ] && entVersion=$entVer
		check_entware_folder
		cd
		write_jffsfile
		show_amtm " $entVersion install successful."
	else
		cd
		show_amtm " $entVer install failed."
	fi
}

# Use selected color theme when Diversion/AB-Solution is installed
check_AB_theme(){
	divconf=/opt/share/diversion/.conf/diversion.conf
	if [ -f "$divconf" ]; then
		theme="$(grep "THEME=" "$divconf" | sed -e 's/THEME=//')"
		divver="$(grep "thisVERSION=" "$divconf" | sed -e 's/thisVERSION=//')"
		divMver="$(grep "thisM_VERSION=" "$divconf" | sed -e 's/thisM_VERSION=//')"
		[ "$divMver" ] && divver="v${divver}.$divMver" || divver=v$divver
		. /opt/share/diversion/file/theme.div
	else
		abcfg="$(find /mnt/*/adblocking/.config/ab-solution.cfg 2> /dev/null)"
		[ "$abcfg" ] && theme="$(grep "appTheme=" "$abcfg" | sed -e 's/appTheme="//; s/"//')"
		[ -z "$theme" ] && theme=standard

		theme_standard(){ RED_LINE='[0;31m';RED_BG='[41m';ERR_BG='[41m';GREEN_BG='[42m';GRAY='[90m';NC='[0m';}
		theme_green(){ RED_LINE='[0;33m';RED_BG='[42m';ERR_BG='[41m';GREEN_BG='[42m';GRAY='[90m';NC='[0m';}
		theme_blue(){ RED_LINE='[0;34m';RED_BG='[44m';ERR_BG='[0;101m';GREEN_BG='[0;104m';GRAY='[90m';NC='[0m';}
		theme_blue_on_white(){ RED_LINE='[0;34m';RED_BG='[0;104m';ERR_BG='[0;101m';GREEN_BG='[0;104m';GRAY='[90m';NC='[0m';}
		theme_high_contrast(){ RED_LINE='[0;91m';RED_BG='[41m';ERR_BG='[41m';GREEN_BG='[42m';GRAY='[90m';NC='[0m';}
		theme_white_on_black(){ RED_LINE=;RED_BG=;ERR_BG=;GREEN_BG=;GRAY=;NC='[0m';}
	fi
	theme_$theme
}

show_amtm(){
	clear
	check_AB_theme

	# amtm header
	printf "${RED_BG}%-25s%s\\n" " $thisScript $version" "by thelonelycoder ${NC}"
	echo " The $title"
	echo

	# show router info, helpful when installing scripts
	[ -z "$(nvram get odmpid)" ] && model="$(nvram get productid)" || model="$(nvram get odmpid)"
	echo " $model ($(uname -m)) FW-$(nvram get buildno) @ $(nvram get lan_ipaddr)"
	print_end_line
	echo "    SNBForum scripts"

	# Skript menu in alphabetical order follow

	# 1 Diversion/AB-Solution menu
	if [ -f "/opt/bin/diversion" ]; then
		printf "${GREEN_BG} 1 ${NC} %-9s%s\\n" "open" "Diversion $divver"

		case_1(){
			clear
			diversion
			sleep 2
			show_amtm menu
		}

	elif [ -f "$HOME/ab-solution.sh" ] || [ -f "/opt/bin/ab-solution" ]; then
		printf "${GREEN_BG} 1 ${NC} %-9s%s\\n" "open" "AB-Solution"

		if [ -f "/opt/bin/ab-solution" ]; then

			case_1(){
				clear
				ab-solution
				sleep 2
				show_amtm menu
			}
		else

			case_1(){
				clear
				sh "$HOME/ab-solution.sh"
				sleep 2
				show_amtm menu
			}
		fi
	elif [ "$(find /mnt/*/ab-solution.sh 2> /dev/null)" ]; then
		# this is the worst case: device name changed or something bad happened
		printf "${GREEN_BG} 1 ${NC} %-9s%s\\n" "open" "AB-Solution"
		printf "%3s${ERR_BG} %-35s${NC}\\n" "" "Warning AB-Solution in error state"
		printf "%3s${ERR_BG} %-35s${NC}\\n" "" "Open it now to correct errors"

		case_1(){
			sh "$(find /mnt/*/ab-solution.sh)"
			sleep 2
			show_amtm menu
		}
	else
		printf "${ERR_BG} 1 ${NC} %-9s%s\\n" "install" "Diversion"

		case_1(){
			print_info_line
			echo " This installs Diversion,"
			echo " the Router Adblocker."
			echo
			echo " Author: thelonelycoder"
			echo " https://www.snbforums.com/threads/diversion-the-router-adblocker.48538/"
			continue_dialog
			curl -Os https://diversion.ch/install && sh install
			sleep 2
			show_amtm " Diversion installed."
		}
	fi


	# 2 dnscrypt installer menu
	if [ -d /jffs/dnscrypt ]; then
		printf "${GREEN_BG} 2 ${NC} %-9s%s\\n" "open" "dnscrypt installer"

		case_2(){
			printf "\\n dnscrypt installer menu:\\n\\n"
			curl -L -s -k -O https://raw.githubusercontent.com/thuantran/dnscrypt-asuswrt-installer/master/installer && sh installer ; rm installer
			show_amtm menu
		}
	else
		printf "${ERR_BG} 2 ${NC} %-9s%s\\n" "install" "dnscrypt installer"

		case_2(){

			print_info_line
			echo " This installs dnscrypt installer on your"
			echo " router."
			echo
			echo " Author: bigeyes0x0"
			echo " https://www.snbforums.com/threads/release-dnscrypt-installer-for-asuswrt.36071/"
			continue_dialog

			if [ -f "/jffs/scripts/install_stubby.sh" ] && [ -f "/opt/etc/stubby/stubby.yml" ]; then
				show_amtm " dnscrypt installer install failed.\\n It is not compatible with Stubby DNS\\n which is installed on this router."
			fi

			curl -L -s -k -O https://raw.githubusercontent.com/thuantran/dnscrypt-asuswrt-installer/master/installer && sh installer ; rm installer
			show_amtm " dnscrypt installer installed."
		}
	fi


	# 3 Entware menu
	if [ -f "/opt/bin/opkg" ]; then
		printf "${GREEN_BG} 3 ${NC} %-9s%s\\n" "update" "Entware"

		case_3(){
			print_info_line
			echo " This updates and upgrades Entware packages"
			if [ -f "/opt/bin/diversion" ]; then
				echo
				echo " Note: Diversion is installed on this router."
				echo " It's recommended to update Entware packages"
				echo " in Diversion using the ${RED_BG} ep ${NC} option."
				echo " Especially so when pixelserv-tls is installed."
			fi
			continue_dialog
			opkg update
			opkg upgrade
			show_amtm " Entware packages updated and upgraded."
		}
	else
		printf "${ERR_BG} 3 ${NC} %-9s%s\\n" "install" "Entware"

		case_3(){
			print_info_line
			echo " This installs Entware on this router."
			echo
			echo " Note: If you plan to install Diversion on"
			echo " this router, install Diversion first,"
			echo " it includes the installation of Entware."
			echo
			echo " Author: thelonelycoder"
			echo " https://www.snbforums.com/threads/diversion-the-router-adblocker.48538/"
			continue_dialog
			install_Entware
			sleep 2
			show_amtm menu
		}
	fi


	# 4 Pixelserv menu
	if [ -f "/opt/bin/pixelserv-tls" ]; then
		if [ -L "/opt/bin/pixelserv-tls" ]; then
			psVersion="$(pixelserv-tls -v | awk 'NR == 1 {print $2}')"
			[ -z "$psVersion" ] && psVersion="likely v.Kk"
			psVersion="v$psVersion"
			[ -z "$(pidof pixelserv-tls)" ] && psVersion="v$psVersion ${ERR_BG}(not running)${NC}"
			printf "${GREEN_BG} 4 ${NC} %-9s%s\\n" "update" "pixelserv-tls beta $psVersion"
		else
			printf "${ERR_BG} 4 ${NC} %-9s%s\\n" "install" "pixelserv-tls beta version"
		fi

		case_4(){
			print_info_line
			echo " This installs the latest pixelserv-tls beta version."
			echo " Be aware this is for advanced users only."
			echo
			echo " Author: kvic"
			echo " https://www.snbforums.com/threads/pixelserv-a-better-one-pixel-webserver-for-adblock.26114/"
			print_end_line
			echo
			echo " 1. Install dynamically linked beta version."
			echo "    (Regular beta version)"
			echo " 2. Install statically linked beta version."
			echo "    (_binfavor=static, arm7 and armv8/aarch64"
			echo "    based router models only)"
			while true;do
				printf "\\n Enter selection [1-2 e=Exit] ";read -r continue
				case "$continue" in
					1)		sh -c "$(wget -qO - https://kazoo.ga/pixelserv-tls/install-beta.sh)"
							/opt/etc/init.d/S80pixelserv-tls restart
							show_amtm " latest pixelserv-tls beta version\\n installed and restarted.";break;;
					2)		_binfavor=static sh -c "$(wget -qO - https://kazoo.ga/pixelserv-tls/install-beta.sh)"
							/opt/etc/init.d/S80pixelserv-tls restart
							show_amtm " latest pixelserv-tls beta version\\n installed and restarted.";break;;
					[Ee])	show_amtm menu;break;;
					*)		printf "\\n input is not an option\\n";;
				esac
			done
		}
	else
		printf "${ERR_BG} 4 ${NC} %-9s%s\\n" "" "Menu not available"

		case_4(){
			show_amtm " pixelserv-tls beta menu not available,\\n pixelserv-tls is not installed."
		}
	fi


	# 5 Skynet menu
	if [ -f "/jffs/scripts/firewall" ] && grep -qE "sh /jffs/scripts/firewall .* # Skynet" /jffs/scripts/firewall-start 2> /dev/null; then
		printf "${GREEN_BG} 5 ${NC} %-9s%s\\n" "open" "Skynet $(grep -m1 -oE 'v[0-9]{1,2}([.][0-9]{1,2})([.][0-9]{1,2})' /jffs/scripts/firewall)"

		case_5(){
			/jffs/scripts/firewall
			sleep 2
			show_amtm menu
		}
	else
		printf "${ERR_BG} 5 ${NC} %-9s%s\\n" "install" "Skynet"

		case_5(){
			print_info_line
			echo " This installs Skynet on your router."
			echo
			echo " Author: Adamm"
			echo " https://www.snbforums.com/threads/skynet-asus-firewall-addition-dynamic-malware-country-manual-ip-blocking.16798/"
			continue_dialog

			if ! ipset -v | grep -qF "v6"; then
				show_amtm " Skynet install failed,\\n IPSet version on router not supported:\\n\\n$(ipset -v | sed -e 's/^/ /')"
			fi

			curl --retry 3 "https://raw.githubusercontent.com/Adamm00/IPSet_ASUS/master/firewall.sh" -o "/jffs/scripts/firewall" && chmod +x /jffs/scripts/firewall && sh /jffs/scripts/firewall install
			sleep 2
			show_amtm " Skynet installed."
		}
	fi


	# 6 Stubby-Installer-Asuswrt-Merlin menu
	if [ -f "/jffs/scripts/install_stubby.sh" ] && [ -f "/opt/etc/stubby/stubby.yml" ]; then
		printf "${GREEN_BG} 6 ${NC} %-9s%s\\n" "open" "Stubby DNS v$(grep "VERSION=" /jffs/scripts/install_stubby.sh | sed -e 's/VERSION=//;s/"//g')"

		case_6(){
			/jffs/scripts/install_stubby.sh
			sleep 2
			show_amtm menu
		}
	else
		printf "${ERR_BG} 6 ${NC} %-9s%s\\n" "install" "Stubby DNS"

		case_6(){
			print_info_line
			echo " This installs Stubby DNS Privacy Daemon"
			echo " on your router."
			echo
			echo " Authors: Xentrk, Adamm"
			echo " https://www.snbforums.com/threads/stubby-installer-asuswrt-merlin.49469/"
			continue_dialog

			if [ -d "/jffs/dnscrypt" ] || [ -f "/opt/sbin/dnscrypt-proxy" ]; then
				show_amtm " Stubby DNS install failed. It is not\\n compatible with dnscrypt installer which\\n is installed on this router."
			fi

			/usr/sbin/curl --retry 3 "https://raw.githubusercontent.com/Xentrk/Stubby-Installer-Asuswrt-Merlin/master/install_stubby.sh" -o "/jffs/scripts/install_stubby.sh" && chmod 755 /jffs/scripts/install_stubby.sh && sh /jffs/scripts/install_stubby.sh
			sleep 2
			show_amtm " Stubby DNS installed."
		}
	fi


	# System tools follow
	# sw/swp/swap Swap file
	echo
	echo "    amtm system tools"
	swaplocation="$(grep -o "swapon .*" /jffs/scripts/post-mount 2>/dev/null | awk '{print $2}')"
	if [ -z "$swaplocation" ]; then
		if [ "$(find /mnt/*/myswap.swp 2> /dev/null)" ]; then
			printf "${ERR_BG} sw${NC} %-9s%s ${ERR_BG}%s${NC}\\n" "check" "Swap file" "$(find /mnt/*/myswap.swp 2> /dev/null)"

			case_swp(){
				manage_swap check
			}

		else
			printf "${ERR_BG} sw${NC} %-9s%s\\n" "create" "Swap file"

			case_swp(){
				print_info_line
				echo " This creates a Swap file."
				echo " A Swap file is useful when the router"
				echo " runs out of memory (RAM)."
				echo " See router WebUI/Tools under Memory."
				continue_dialog
				manage_swap create
			}
		fi

	elif [ -f "$swaplocation" ]; then
		if ! grep -qF "myswap.swp" /proc/swaps; then
			swapon "$swaplocation" 2> /dev/null
		fi

		printf "${GREEN_BG} sw${NC} %-9s%s ${GREEN_BG}%s${NC}\\n" "delete" "Swap file" "$(echo "${swaplocation#/tmp}" | sed 's|/myswap.swp||')"

		case_swp(){
			manage_swap delete
		}

	elif [ ! -f "$swaplocation" ] && [ ! -z "$swaplocation" ]; then
		printf "${ERR_BG} sw${NC} %-9s%s ${ERR_BG}%s${NC}\\n" "check" "Swap file" "${swaplocation#/tmp}"

		case_swp(){
			manage_swap check
		}

	fi

	# Disk check
	if [ -f "/jffs/scripts/disk-check" ] && grep -qE "/jffs/scripts/disk-check # Added by" /jffs/scripts/pre-mount; then
		printf "${GREEN_BG} dc${NC} %-9s%s\\n" "remove" "Disk check script"

		[ -f "/jffs/amtm-disk-check.log" ] && printf "${GREEN_BG}dcl${NC} %-9s%s\\n" "show" "Disk check log"

		case_dc(){
			disk_check remove
			show_amtm menu
		}
	else
		printf "${ERR_BG} dc${NC} %-9s%s\\n" "install" "Disk check script"

		case_dc(){
			print_info_line
			echo " This installs /jffs/scripts/disk-check."
			echo " It runs a filesystem check on compatible"
			echo " USB storage devices before they are mounted."
			echo
			echo " Authors: latenitetech, thelonelycoder"
			echo " https://github.com/RMerl/asuswrt-merlin/wiki/USB-Disk-Check-at-Boot"
			continue_dialog

			disk_check install
			show_amtm " Disk check script installed.\\n The check log can be viewed directly\\n in amtm with dcl."
		}
	fi

	# Format disk
	printf "${GREEN_BG} fd${NC} %-9s%s\\n" "run" "Format disk"
	[ -f "/jffs/amtm-format-disk.log" ] && printf "${GREEN_BG}fdl${NC} %-9s%s\\n" "show" "Format disk log"

	case_fd(){
		print_info_line
		echo " This (re)formats your plugged in USB storage"
		echo " device to ext* filesystem.  The process"
		echo " erases all data and partitions on the device."
		echo " After formatting, the router will reboot."
		echo
		echo " To be on the safe side, remove all other"
		echo " attached USB devices before continuing."
		echo
		echo " Authors: Zonkd, ColinTaylor, thelonelycoder"
		echo " https://www.snbforums.com/threads/ext4-disk-formatting-options-on-the-router.48302/page-2#post-455723"
		continue_dialog

		format_disk
	}

	# amtm menu
	echo
	echo "    amtm options"
	echo "${GREEN_BG} u ${NC} update"
	[ -f "/jffs/scripts/$thisScript" ] || [ -f "/opt/bin/$thisScript" ] && echo "${GREEN_BG} r ${NC} remove"  || echo "${GREEN_BG} i ${NC} install"
	echo "${GREEN_BG} a ${NC} about"
	echo "${GREEN_BG} e ${NC} exit"

	# Output under amtm menu, the notification area. $1 can be passed on as positional parameter
	if [ "$1" = "menu" ]; then
		print_end_line
	else
		print_info_line
		printf "$1\\n"
		print_end_line
	fi

	while true; do
		printf "${RED_BG} What do you want to do? ${NC} ";read -r selection
		case "$selection" in

			# Scripts go here
			1)			case_1;break;;
			2)			case_2;break;;
			3)			case_3;break;;
			4)			case_4;break;;
			5)			case_5;break;;
			6)			case_6;break;;

			# System tools
			swap|swp|sw)case_swp;break;;
			[Dd][Cc])	case_dc;break;;
			dcl)		disk_check log
						show_amtm menu;break;;
			[Ff][Dd])	case_fd;break;;
			fdl)		format_disk_log
						show_amtm menu;break;;

			# amtm options
			[Uu])		update_amtm;break;;
			[Ii])		install_amtm;break;;
			[Rr])		remove_amtm;break;;
			[Aa])		about_amtm;break;;
			[Ee])		clear
						ascii_logo
						printf "   Goodbye\\n\\n"
						exit 0;break;;
			11)			exec "$0";break;; # hidden dev option
			*)			printf "\\n input is not an option\\n\\n";;
		esac
	done
}

# asks to install, show menu, pass along positional parameter
if [ ! -f "/jffs/scripts/$thisScript" ]; then
	ascii_logo
	echo " Do you want to install $thisScript, the"
	echo " $title?"
	echo
	print_end_line
	while true;do
		printf " Continue? [1=Yes e=Exit] ";read -r continue
		case "$continue" in
			1)		install_amtm;break;;
			[Ee])	rm -f "$0";echo;exit 0;break;;
			*)		printf "\\n input is not an option\\n\\n";;
		esac
	done
elif [ -z "$1" ]; then
	recheck_opt
	show_amtm menu
else
	show_amtm "$1"
fi
#eof