#!/bin/sh
#bof

# Set environment PATH to system binaries
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:$PATH

# Proudly coded by thelonelycoder/decoderman
# Copyright (C) 2016-2019 thelonelycoder - All Rights Reserved
# https://www.snbforums.com/members/thelonelycoder.25480/
# https://github.com/decoderman

# How to install on Asuswrt-Merlin
# Enter this into your favorite SSH terminal, without the leading "#":
# /usr/sbin/curl -Os https://raw.githubusercontent.com/decoderman/amtm/master/amtm && sh amtm

# amtm is free to use under the GNU General Public License version 3 (GPL-3.0)
# https://opensource.org/licenses/GPL-3.0

version=2.1
release="April 28 2019"
title="SNBForum Asuswrt-Merlin Terminal Menu"
thisScript=amtm
dc_version=2.2

ascii_logo(){
	echo "              _"
	echo "   ____ ____ | |_  ____"
	echo "  / _  |    \|  _)|    \ "
	echo " ( ( | | | | | |__| | | |"
	echo "  \_||_|_|_|_|\___)_|_|_|"
	echo
}

about_amtm(){
	echo
	print_end_line
	echo " $thisScript, the $title
 Version $version, released on $release

 amtm is a shortcut manager for popular scripts
 for wireless routers running Asuswrt-Merlin firmware.

 For updates and discussion visit this thread:
 https://www.snbforums.com/threads/amtm-the-snbforums-asuswrt-merlin-terminal-menu.42415/

 Author: thelonelycoder/decoderman
 https://www.snbforums.com/members/thelonelycoder.25480/
 https://github.com/decoderman
 https://diversion.ch/amtm.html

 Contributor: Adamm
 https://www.snbforums.com/members/adamm.19554/

 $thisScript License:
 $thisScript is free to use under the GNU General
 Public License, version 3 (GPL-3.0).
 https://opensource.org/licenses/GPL-3.0

 Copyright (C) 2016-2019 thelonelycoder - All Rights Reserved"
	print_end_line
	press_enter_to "return to menu"
	show_amtm menu
}

theme_standard(){ RED_LINE='[0;31m';RED_BG='[41m';ERR_BG='[41m';GREEN_BG='[42m';GRAY='[90m';NC='[0m';}
print_info_line(){ echo;echo "${RED_LINE}__________________| INFO |___________________${NC}";echo;}
print_end_line(){ echo "${RED_LINE}_____________________________________________${NC}";echo;}
press_enter_to(){ printf "\\n Press [Enter] to $1 ";read -r;echo;}
continue_dialog(){
	echo
	print_end_line
	while true; do
		printf " Continue? [1=Yes e=Exit] ";read -r continue
		case "$continue" in
			1)		echo;break;;
			[Ee])	show_amtm menu;break;;
			*)		printf "\\n input is not an option\\n\\n";;
		esac
	done
}

install_amtm(){
	ascii_logo
	echo " Do you want to install $thisScript"
	echo " the $title?"
	echo
	print_end_line
	while true; do
		printf " Continue? [1=Yes e=Exit] ";read -r continue
		case "$continue" in
			1)		if [ -d "/jffs" ]; then
						mkdir -p /jffs/scripts
						if [ "$(nvram get jffs2_scripts)" != "1" ]; then
							nvram set jffs2_scripts=1
							nvram commit
						fi

						[ ! -f "/jffs/scripts/$thisScript" ] && cp "$0" /jffs/scripts/$thisScript
						chmod 0755 /jffs/scripts/$thisScript
						message="/jffs/scripts/$thisScript"

						if [ -L "/opt/bin/$thisScript" ]; then
							rm -f "/opt/bin/$thisScript"
						fi
						if [ -d "/opt/bin" ] && [ ! -L "/opt/bin/$thisScript" ]; then
							ln -s /jffs/scripts/$thisScript /opt/bin
							chmod 0755 /opt/bin/$thisScript
							message="/jffs/scripts/$thisScript\\n\\n or simply with:\\n $thisScript"
						fi

						if [ "$0" = "/jffs/scripts/$thisScript" ]; then
							subshell=
						else
							subshell="exec"
							rm -f "$0"
						fi
						"$subshell" /jffs/scripts/$thisScript " $title\\n successfully installed!\\n\\n You can start $thisScript with:\\n $message"
					else
						echo
						echo " /jffs partition is not present on this"
						echo " router. amtm cannot be installed."
						echo " Please investigate."
						rm -f "$0"
						echo
						exit 0
					fi
					break;;
			[Ee])	rm -f "$0";echo;exit 0;break;;
			*)		printf "\\n input is not an option\\n\\n";;
		esac
	done
}

remove_amtm(){
	print_info_line
	echo " Do you want to remove $thisScript now?"
	echo
	echo " Note that removing $thisScript will not remove or"
	echo " uninstall any installed SNBForum scripts."
	echo
	echo " It will, however, remove the Disk check"
	echo " script and log, the Format disk log and the"
	echo " reboot scheduler when found."
	continue_dialog
	if [ -f /jffs/scripts/disk-check ]; then
		sed -i '\~/jffs/scripts/disk-check ~d' /jffs/scripts/pre-mount
		rm -f /jffs/scripts/disk-check
		rm -f /jffs/amtm-disk-check.log
	fi
	[ -f "/jffs/amtm-format-disk.log" ] && rm /jffs/amtm-format-disk.log
	if [ -f "/jffs/scripts/init-start" ] && grep -qE "amtm_RebootScheduler" /jffs/scripts/init-start; then
		sed -i '\~amtm_RebootScheduler~d' /jffs/scripts/init-start
		cru d amtm_RebootScheduler
	fi
	rm -f /opt/bin/$thisScript
	rm -f /jffs/scripts/$thisScript
	rm -f "$0"
	echo " Removed all traces of $thisScript"
	echo
	exit 0
}

update_amtm(){
	case "$release" in
		*XX*) 	remoteurl="http://diversion.test/scripts/amtm"
				if ! ping -c1 -W2 -q "$(echo $remoteurl | sed 's#http[s]*://##;s#/.*##')" >/dev/null 2>&1; then
					remoteurl="https://raw.githubusercontent.com/decoderman/amtm/master/amtm"
				fi;;
		*) 		remoteurl="https://raw.githubusercontent.com/decoderman/amtm/master/amtm";;
	esac
	curl -fsN --retry 3 "$remoteurl" | grep -qF "version=" || show_amtm " Update aborted,\\n could not retrieve version"
	remotever="$(curl -fsN --retry 3 "$remoteurl" | grep "^version=" | sed -e 's/version=//')"
	localmd5="$(md5sum "$0" | awk '{print $1}')"
	remotemd5="$(curl -fsL --retry 3 "$remoteurl" | md5sum | awk '{print $1}')"

	print_info_line

	if [ "$version" != "$remotever" ]; then
		echo " $thisScript $remotever is now available!"
		echo
		echo " Do you want to update now?"
		continue_dialog
		curl -fs --retry 3 "$remoteurl" -o "$0" && exec "$0" " $title\\n updated from $version to $remotever"
	elif [ "$localmd5" != "$remotemd5" ]; then
		echo " A minor $thisScript update is available, no version"
		echo " change."
		echo
		echo " Do you want to update now?"
		continue_dialog
		curl -fs --retry 3 "$remoteurl" -o "$0" && exec "$0" " $title\\n minor $thisScript version update applied"
	else
		echo " No new version or minor update is available,"
		echo " do you want to force update $thisScript?"
		continue_dialog
		curl -fs --retry 3 "$remoteurl" -o "$0" && exec "$0" " $title\\n force updated to $remotever"
	fi
}

manage_swap(){
	if [ "$1" = "create" ]; then
		print_info_line
		echo " This creates a Swap file."
		echo " A Swap file is useful when the router"
		echo " runs out of memory (RAM)."
		echo " See router WebUI/Tools under Memory."
		continue_dialog

		while true; do
			case "$continue" in
				1)	print_end_line
					echo " Listing compatible device(s) for a Swap file"
					echo
					i=1;noad=
					for mounted in $(/bin/mount | grep -E "ext2|ext3|ext4|tfat|exfat" | cut -d" " -f3); do
						echo " $i. ${GREEN_BG}$mounted${NC}"
						eval mounts$i=\"$mounted\"
						noad="${noad}${i} "
						i=$(( i + 1 ))
					done

					if [ "$i" = "1" ]; then
						show_amtm " No compatible device available."
					fi

					[ "$i" = "2" ] && devNo=1-1 || devNo="1-$((i-1))"
					while true; do
						printf "\\n Select device [$devNo e=Exit] ";read -r device
						case "$device" in
							[$noad])	break;;
							[Ee])		show_amtm " Exited Swap file function";break;;
							*)			printf "\\n input is not an option\\n";;
						esac
					done

					eval swapDevice="\$mounts$device"

					print_end_line
					echo " creating Swap file on ${GREEN_BG}${swapDevice}${NC}"
					while true; do
						printf "\\n Continue? [1=Yes e=Exit] ";read -r swaps
						case "$swaps" in
							1)	print_end_line
								echo " Select a Swap file size"
								echo
								echo " 1. --> 256MB"
								echo " 2. --> 512MB"
								echo " 3. -->   1GB"
								echo " 4. -->   2GB"

								while true; do
									printf "\\n Enter size [1-4 e=Exit] ";read -r size
									case "$size" in
										1)	swapsize=262144;break;;
										2)	swapsize=524288;break;;
										3)	swapsize=1048576;break;;
										4)	swapsize=2097152;break;;
									 [Ee])	show_amtm menu;break;;
										*)	printf "\\n input is not an option\\n";;
									esac
								done

								if [ "$(df "$swapDevice" | xargs | awk '{print $11}')" -le "$swapsize" ]; then
									print_end_line
									echo " Not enough free space available on:"
									echo " $swapDevice"
									press_enter_to "select another device"
									read -r;echo
									print_end_line
									manage_swap create
								fi

								print_end_line
								echo " Creating the Swap file,"
								echo " this will take some time..."
								echo
								dd if=/dev/zero of="$swapDevice/myswap.swp" bs=1k count="$swapsize"
								mkswap "$swapDevice/myswap.swp"
								swapon "$swapDevice/myswap.swp"
								nvram set usb_idle_timeout=0
								nvram commit
								if [ ! -f "/jffs/scripts/post-mount" ]; then
									echo "#!/bin/sh" > /jffs/scripts/post-mount
								elif [ -f "/jffs/scripts/post-mount" ] && ! head -1 /jffs/scripts/post-mount | grep -qE "^#!/bin/sh"; then
									sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/post-mount
								fi
								sed -i "2i swapon $swapDevice/myswap.swp # Swap file created by $thisScript" /jffs/scripts/post-mount
								show_amtm " Swap file created at:\\n $swapDevice/myswap.swp";break;;
						[Ee])	show_amtm menu;break;;
							*)  printf "\\n input is not an option\\n";;
						esac
					done;break;;
			 [Ee])	show_amtm menu;break;;
				*)	printf "\\n input is not an option\\n";;
			esac
		done

	elif [ "$1" = "delete" ]; then
		print_end_line
		echo " Swap file found at:"
		echo " ${GREEN}$swaplocation${NC}"

		while true; do
			printf "\\n Delete the Swap file? [1=Yes e=Exit] ";read -r continue
			case "$continue" in
				1)		if [ -f "$swaplocation" ]; then
							swapoff "$swaplocation"
							rm "$swaplocation"
							sed -i '\~swapon ~d' /jffs/scripts/post-mount
							show_amtm " Swap file deleted:\\n $swaplocation"
						else
							sed -i '\~swapon ~d' /jffs/scripts/post-mount
							show_amtm " No Swap file found at\\n $swaplocation"
						fi
						break;;
				[Ee])	show_amtm menu;break;;
				*)		printf "\\n input is not an option\\n";;
			esac
		done

	elif [ "$1" = "multidelete" ]; then
		print_end_line
		echo " Multiple swap files found, only one file is"
		echo " supported."
		echo
		echo " These swap files were found:"
		echo

		i=1
		for swapfile in $(find /tmp/mnt/*/*.swp 2> /dev/null); do
			echo " $i. ${GREEN}$swapfile${NC} $(du -h "$swapfile" | awk '{print $1}')"
			eval swapfile$i="$swapfile"
			noad="${noad}${i} "
			i=$((i+1))
		done

		while true; do
			printf "\\n Enter swap file to delete [1-$((i-1)) e=Exit] ";read -r continue
			case "$continue" in
				[$noad]) 	swapoff -a
							eval rmswap="\$swapfile$continue"
							rm "$rmswap"
							show_amtm menu
							break;;
				[Ee])		show_amtm menu;break;;
				*)			printf "\\n input is not an option\\n";;
			esac
		done
	fi
}

disk_check(){
	if [ -f "/jffs/scripts/pre-mount" ] && grep -q "e2fsck -p" /jffs/scripts/pre-mount; then
		show_amtm " Unsupported pre-mount script found,\\n please remove file manually."
	else
		if [ "$1" = "install" ]; then
			write_dc_file

			if [ ! -f "/jffs/scripts/pre-mount" ]; then
				echo "#!/bin/sh" > /jffs/scripts/pre-mount
			elif [ -f "/jffs/scripts/pre-mount" ] && ! head -1 /jffs/scripts/pre-mount | grep -qE "^#!/bin/sh"; then
				sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/pre-mount
			fi
			if ! grep -q ". /jffs/scripts/disk-check" /jffs/scripts/pre-mount; then
				echo ". /jffs/scripts/disk-check # Added by $thisScript" >> /jffs/scripts/pre-mount
			fi
			chmod 0755 /jffs/scripts/pre-mount /jffs/scripts/disk-check

		elif [ "$1" = "remove" ]; then
			print_info_line
			printf " This removes the Disk check script and its\\n log file.\\n"
			continue_dialog
			sed -i '\~/jffs/scripts/disk-check ~d' /jffs/scripts/pre-mount
			rm -f /jffs/scripts/disk-check
			rm -f /jffs/amtm-disk-check.log
			show_amtm " Disk check and log removed"

		elif [ "$1" = "log" ]; then
			if [ -f "/jffs/amtm-disk-check.log" ]; then
				echo
				echo " ---------------------------------------------------"
				printf " /jffs/amtm-disk-check.log has this content:\\n\\n"
				echo " START FILE, --- lines are not part of file"
				echo " ---------------------------------------------------"
				sed -e 's/^/ /' /jffs/amtm-disk-check.log
				echo " ---------------------------------------------------"
				echo " END FILE"
				echo
				print_end_line
				while true; do
					printf " Delete log file now? [1=Yes e=Exit] ";read -r continue
					case "$continue" in
						1)		rm /jffs/amtm-disk-check.log
								show_amtm " Format disk log deleted"
								break;;
						[Ee])	show_amtm menu;break;;
						*)		printf "\\n input is not an option\\n\\n";;
					esac
				done
			else
				show_amtm " No disk check log found (yet)."
			fi
		fi
	fi
}

write_dc_file(){
	cat <<-EOF > /jffs/scripts/disk-check
	#!/bin/sh
	# disk-check, check filesystem before partition is mounted
	# generated by amtm $version

	# Proudly coded by thelonelycoder/decoderman
	# Copyright (C) 2016-2019 thelonelycoder - All Rights Reserved
	# https://www.snbforums.com/members/thelonelycoder.25480/
	# https://github.com/decoderman

	# Contributors: ColinTaylor, latenitetech

	# amtm is free to use under the GNU General Public License version 3 (GPL-3.0)
	# https://opensource.org/licenses/GPL-3.0

	VERSION=$dc_version
	TAG="amtm disk-check"
	CHKLOG="/jffs/amtm-disk-check.log"
	CHKCMD=

	if [ -f "\$CHKLOG" ] && [ "\$(wc -c < \$CHKLOG)" -gt "500000" ]; then
	    sed -i '1,500d' "\$CHKLOG"
	    sed -i "1s/^/Truncated log file, size over 500KB, on \$(date)\n\n/" "\$CHKLOG"
	    logger -t "\$TAG" "Truncated \$CHKLOG, size over 500KB"
	fi

	# \$1=device \$2=filesystem type

	if [ "\$#" -lt "2" ]; then
	    FSTYPE=\$(fdisk -l \${1:0:8} | grep \$1 | cut -c55-65)
	    logger -t "\$TAG" "Firmware does not support filesystem type parameter, probing \$FSTYPE on device \$1"
	    printf "\n\$(date) Firmware does not support filesystem type parameter, probing \$FSTYPE on device \$1.\n" >> \$CHKLOG
	    case "\$FSTYPE" in
	        Linux*)             CHKCMD="e2fsck -p" ;;
	        Win95* | FAT*) 	    CHKCMD="fatfsck -a" ;;
	        HPFS/NTFS)          CHKCMD="ntfsck -a" ;;
	        *)                  logger -t "\$TAG" "Unknown filesystem type \$FSTYPE on \$1 - skipping check."
	                            printf "\$(date) Unknown filesystem type \$FSTYPE on \$1 - skipping check.\n" >> \$CHKLOG ;;
	    esac
	else
	    logger -t "\$TAG" "Probing \$2 on device \$1"
	    printf "\n\$(date) Probing \$2 on device \$1\n" >> \$CHKLOG
	    case "\$2" in
	        "")                 logger -t "\$TAG" "Error reading device \$1 - skipping check"
	                            printf "\$(date) Error reading device \$1 - skipping check.\n" >> \$CHKLOG ;;
	        ext2|ext3|ext4)     CHKCMD="e2fsck -p" ;;
	        hfs|hfs+j|hfs+jx)   if [ -x /usr/sbin/chkhfs ]; then
	                                CHKCMD="chkhfs -a -f"
	                            elif [ -x /usr/sbin/fsck_hfs ]; then
	                                CHKCMD="fsck_hfs -d -ay"
	                            else
	                                logger -t "\$TAG" "Unsupported filesystem \$2 on device \$1 - skipping check"
	                                printf "\$(date) Unsupported filesystem \$2 on device \$1 - skipping check.\n" >> \$CHKLOG
	                            fi ;;
	        ntfs)               if [ -x /usr/sbin/chkntfs ]; then
	                                CHKCMD="chkntfs -a -f"
	                            elif [ -x /usr/sbin/ntfsck ]; then
	                                CHKCMD="ntfsck -a"
	                            fi ;;
	        vfat)               CHKCMD="fatfsck -a" ;;
	        unknown)            logger -t "\$TAG" "\$1 Unknown filesystem (e.g. exFAT) or no partition table (e.g. blank media) - skipping check."
	                            printf "\$(date) \$1 Unknown filesystem (e.g. exFAT) or no partition table (e.g. blank media) - skipping check.\n" >> \$CHKLOG ;;
	        *)                  logger -t "\$TAG" "Unexpected filesystem type \$2 for \$1 - skipping check."
	                            printf "\$(date) Unexpected filesystem type \$2 for \$1 - skipping check.\n" >> \$CHKLOG ;;
	    esac
	fi

	if [ "\$CHKCMD" ]; then
	    logger -t "\$TAG" "Running disk check (v\$VERSION) '\$CHKCMD' on \$1"
	    printf "\$(date) Running disk check (v\$VERSION) '\$CHKCMD' on \$1\n" >> \$CHKLOG
	    \$CHKCMD "\$1" >> \$CHKLOG 2>&1
	    logger -t "\$TAG" "Disk check done on \$1"
	fi

	EOF
}

format_disk(){

	select_device(){
		print_end_line
		echo " Select your device to format"
		echo
		echo " ${ERR_BG} Again, this will erase all data and ${NC}"
		echo " ${ERR_BG} partitions on the selected device! ${NC}"
		echo

		pto=4;pts=4
		case "$(uname -m)" in
			mips)		PART_TYPES='ext2|ext3|fat|tntfs|ufsd';pto=3;pts=;;
			armv7l)		PART_TYPES='ext2|ext3|ext4|fat|tntfs|ufsd';;
			aarch64)	PART_TYPES='ext2|ext3|ext4|fat|tntfs';;
		esac

		i=1;noad=
		for usb_path in $(nvram show 2>/dev/null | grep '^usb_path.*=storage' | cut -d= -f1); do
			usb_dev=$(nvram get ${usb_path}_act)
			usb_manufacturer="$(nvram get ${usb_path}_manufacturer | xargs)"
			usb_product="$(nvram get ${usb_path}_product | xargs)"
			[ -z "$usb_manufacturer" ] && usb_name="$usb_product" || usb_name="$usb_manufacturer $usb_product"
			thisdevsize=$(blockdev --getsize64 "/dev/$usb_dev" 2>/dev/null)
			if [ $? -eq 0 ]; then
				thisdevsize="$(echo $thisdevsize | awk '{ byte=$1/1000000000; printf "%.1f GB",byte }')"
				echo " $i. ${GREEN_BG} $usb_dev $usb_name ($thisdevsize) ${NC}"
				eval mounts$i=\"$usb_dev $usb_name '('$thisdevsize')'\"
				noad="${noad}${i} "
				i=$((i+1))
			fi
		done

		if [ "$i" = "1" ]; then
			show_amtm " No compatible device(s) found to format.\\n"
		fi

		[ "$i" = "2" ] && devNo=1-1 || devNo="1-$((i-1))"
		while true; do
			printf "\\n Select device [$devNo e=Exit] ";read -r device
			case "$device" in
				[$noad])	break;;
				[Ee])		show_amtm " Exited Format disk function";break;;
				*)			printf "\\n input is not an option\\n";;
			esac
		done

		eval mtddev="\$mounts$device"

		devtf="/dev/${mtddev:0:3}"
		devtfsize=$(blockdev --getsize64 $devtf)

		if [ "$devtfsize" -gt 2000000000000 ]; then
			show_amtm " Device is over 2TB and cannot be\\n formatted by $thisScript."
		fi

		print_end_line
		echo " You selected the following device:"
		echo
		echo " ${GREEN_BG} $mtddev ${NC}"
		listptd="$(/bin/mount | grep "^$devtf" | awk -v RED="${ERR_BG}" -v NC="${NC}" '{print " "RED" "$1" "NC" mounted as "RED" "$3" "NC}')"
		if [ "$listptd" ]; then
			echo
			echo " This will delete ALL of the following:"
			echo
			echo "$listptd"
			echo
		else
			echo
			echo " to be formatted."
			echo
		fi

		printf " 1. Continue\\n 2. Return to device selection\\n"
		while true; do
			printf "\\n Enter selection [1-2 e=Exit] ";read -r continue
			case "$continue" in
				1)		break;;
				2)		select_device;break;;
				[Ee])	show_amtm " Exited Format disk function";;
				*)		printf "\\n input is not an option\\n";;
			esac
		done
	}
	select_device

	print_end_line
	printf " Select new filesystem\\n\\n"
	printf " 2. ext2\\n 3. ext3\\n"
	[ "$pto" = "4" ] && printf " 4. ext4\\n"
	while true; do
		printf "\\n Set filesystem [2-$pto] ";read -r continue
		case "$continue" in
			2)		nfs=ext2;break;;
			3)		nfs=ext3;break;;
			[$pts])	nfs=ext4;break;;
			*)		printf "\\n input is not an option\\n";;
		esac
	done

	if [ "$nfs" = "ext3" ] || [ "$nfs" = "ext4" ]; then
		print_end_line
		printf " Do you want to enable journalling?\\n\\n"
		printf " 1. No journalling\\n 2. Enable journalling\\n"
		while true; do
			printf "\\n Enter selection [1-2] ";read -r continue
			case "$continue" in
				1)	journalling=off;break;;
				2)	journalling=on;break;;
				*)	printf "\\n input is not an option\\n";;
			esac
		done
	fi

	select_label(){
		print_end_line
		printf " Do you want to set a device label?\\n\\n"
		printf " 1. No label\\n 2. Set label\\n"
		while true; do
			printf "\\n Enter selection [1-2] ";read -r continue
			case "$continue" in
				1)	label=;break;;
				2)	printf "\\n Enter label: ";read -r label
					print_end_line
					echo " You entered this label: ${GREEN_BG} $label ${NC}"
					echo
					echo " Is this correct?"
					echo
					printf " 1. Yes, continue\\n 2. No, back to label selection\\n"
					while true; do
						printf "\\n Enter selection [1-2] ";read -r continue
						case "$continue" in
							1)	break;;
							2)	label=;select_label;break;;
							*)	printf "\\n input is not an option\\n";;
						esac
					done
					break;;
				*)	printf "\\n input is not an option\\n";;
			esac
		done
	}
	select_label

	print_end_line
	echo " Formatting $mtddev now!"
	echo
	echo " Stopping file serving services and swap file"
	service stop_nasapps >/dev/null
	sleep 1
	swapoff -a
	sleep 2
	echo
	echo " Unmounting device(s)"

	rc=0
	for mounted in $(/bin/mount | grep "^$devtf" | cut -d" " -f1); do
		umount "$mounted"
		rc=$((rc+$?))
	done

	if [ "$rc" -eq "0" ]; then
		format_device(){
			echo
			echo " Zeroing disk and creating partition on $mtddev"
			echo "${GRAY}"

			dd if=/dev/zero of=$devtf count=16065 bs=512 && sync

			sleep 2

			rm /etc/hotplug2.rules; killall hotplug2

			echo "o
			n
			p
			1


			w" | fdisk $devtf
			ln -sf /rom/etc/hotplug2.rules /etc/hotplug2.rules; killall hotplug2

			echo
			if [ "$nfs" = "ext2" ]; then
				echo "${NC} Formatting disk as \"$nfs\"${GRAY}"
				echo
				mke2fs -t $nfs ${devtf}1
			elif [ "$journalling" = "on" ]; then
				echo "${NC} Formatting as \"$nfs\", enabling journalling${GRAY}"
				echo
				mke2fs -t $nfs -O has_journal ${devtf}1
			else
				echo "${NC} Formatting disk as \"$nfs\"${GRAY}"
				echo
				mke2fs -t $nfs -O ^has_journal ${devtf}1
			fi

			if [ "$label" ]; then
				echo "${NC} Setting device label \"$label\"${GRAY}"
				echo
				tune2fs -L "$label" ${devtf}1
			fi
			echo "${NC}"
		}

		echo "$thisScript format disk log $(date -R)" >"/jffs/amtm-format-disk.log"
		format_device | tee -a "/jffs/amtm-format-disk.log"

		print_end_line
		printf " Done formatting device\\n\\n"
		echo " The log file can be viewed with ${GREEN_BG}fdl${NC}"
		printf "\\n Your router will now reboot for\\n"
		printf " the changes to take effect.\\n"
		press_enter_to continue
		sleep 1
		service reboot >/dev/null 2>&1 &
		exit 0
	else
		service service start_nasapps >/dev/null
		echo
		echo " ${ERR_BG} Filesystem(s) did not unmount ${NC}"
		echo " ${ERR_BG} See error above for reason ${NC}"

		if [ -f "/opt/bin/opkg" ]; then
			open_procs(){
				echo
				echo " These processes or files are in use:"
				echo
				for mounted in $(/bin/mount | grep "^$devtf" | cut -d" " -f3); do
					lsof | grep $mounted | grep -v 'grep\|lsof'
					echo
				done
			}

			if [ "$(which lsof)" ]; then
				open_procs
			else
				print_end_line
				printf " Do you want to install Entware package lsof\\n"
				printf " to see what processes or files are in use?\\n\\n"
				printf " 1. Install lsof\\n 2. No thanks\\n"
				while true; do
					printf "\\n Enter selection [1-2] ";read -r continue
					case "$continue" in
						1)	echo "${GRAY}"
							opkg install lsof
							echo "${NC}"
							open_procs;break;;
						2)	echo;break;;
						*)	printf "\\n input is not an option\\n";;
					esac
				done
			fi
		fi

		press_enter_to "return to menu"
		show_amtm " Formatting failed:\\n Filesystem(s) did not unmount."
	fi
}

format_disk_log(){
	if [ -f "/jffs/amtm-format-disk.log" ]; then
		echo
		echo " ---------------------------------------------------"
		printf " /jffs/amtm-format-disk.log has this content:\\n\\n"
		echo " START FILE, --- lines are not part of file"
		echo " ---------------------------------------------------"
		sed -e 's/^/ /' /jffs/amtm-format-disk.log
		echo " ---------------------------------------------------"
		echo " END FILE"
		echo
		print_end_line
		while true; do
			printf " Delete log file now? [1=Yes e=Exit] ";read -r continue
			case "$continue" in
				1)		rm /jffs/amtm-format-disk.log
						show_amtm " Format disk log deleted"
						break;;
				[Ee])	show_amtm menu;break;;
				*)		printf "\\n input is not an option\\n\\n";;
			esac
		done
	else
		show_amtm " No format disk log found (yet)."
	fi
}

reboot_scheduler(){
	if [ "$1" = "install" ]; then
		if [ "$(nvram get reboot_schedule_enable)" = "1" ]; then
			print_end_line
			echo " Reboot scheduler is enabled in the WebUI."
			echo " This needs to be disabled first."
			echo
			while true; do
				printf " Disable scheduler now? [1=Yes e=Exit] ";read -r continue
				case "$continue" in
					1)		nvram set reboot_schedule=00000000000
							nvram set reboot_schedule_enable=0
							nvram commit
							echo
							echo " WebUI Reboot scheduler disabled.";break;;
					[Ee])	show_amtm " Exited reboot scheduler function";break;;
					*)		printf "\\n input is not an option\\n\\n";;
				esac
			done
		fi

		if [ -f "/jffs/scripts/init-start" ] && grep -qE "ScheduledReboot" /jffs/scripts/init-start; then
			echo " Removing third party reboot scheduler"
			echo " in /jffs/scripts/init-start."
			cru d ScheduledReboot
			sed -i '\~/jffs/scripts/ScheduledReboot~d' /jffs/scripts/init-start
		fi

		print_end_line
		rsdow=
		echo " Set day(s) of the week to reboot the router"
		printf "\\n Examples:\\n 1 would reboot on Monday\\n 15 would reboot on Monday and Friday\\n"
		printf " 1234567 would reboot every day\\n"
		printf "\\n 1. Monday\\n 2. Tuesday\\n 3. Wednesday\\n 4. Thursday\\n 5. Friday\\n 6. Saturday\\n 7. Sunday\\n\\n"
		while true; do
			printf " Enter day(s) of week [1-7 e=Exit] ";read -r rsd
			case "$rsd" in
				[Ee])			show_amtm " Exited reboot scheduler function";break;;
				''|*[!1-7]*) 	printf "\\n input is not an option\\n\\n";;
				*) 				for day in $(echo "$rsd" | grep -o .); do
									case "$day" in
										1)		rsdow="$rsdow,Mon";;
										2)		rsdow="$rsdow,Tue";;
										3)		rsdow="$rsdow,Wed";;
										4)		rsdow="$rsdow,Thu";;
										5)		rsdow="$rsdow,Fri";;
										6)		rsdow="$rsdow,Sat";;
										7)		rsdow="$rsdow,Sun";;
									esac
								done
								rsdow=$(echo $rsdow | sed -e 's/^,//');break;;
			esac
		done

		print_end_line
		echo " Set the hour to reboot on $rsdow"
		echo
		while true; do
			printf " Enter hour [0-23] ";read -r rsh
			case "$rsh" in
				[0-9]|[1][0-9]|[2][0-3]) break;;
				*)		printf "\\n input is not an option\\n\\n";;
			esac
		done

		print_end_line
		echo " Set the minute to reboot"
		echo
		while true; do
			printf " Enter minute [0-59] ";read -r rsm
			case "$rsm" in
				[0-9]|[1-5][0-9]) break;;
				*)		printf "\\n input is not an option\\n\\n";;
			esac
		done

		print_end_line
		echo " Your router will reboot every:"
		echo
		[ "$(echo $rsm | wc -m)" -lt "3" ] && rsmc=$(echo $rsm | sed -e 's/^/0/') || rsmc=$rsm
		echo " $rsdow @ ${rsh}:${rsmc}"
		echo
		while true; do
			printf " Is this correct? [1=Yes 2=No] ";read -r continue
			case "$continue" in
				1)		break;;
				2)		echo
						echo " Starting over with reboot scheduler..."
						reboot_scheduler install;break;;
				*)		printf "\\n input is not an option\\n\\n";;
			esac
		done

		if [ ! -f "/jffs/scripts/init-start" ]; then
			echo "#!/bin/sh" > /jffs/scripts/init-start
		elif [ -f "/jffs/scripts/init-start" ] && ! head -1 /jffs/scripts/init-start | grep -qE "^#!/bin/sh"; then
			sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/init-start
		fi
		if ! grep -q "amtm_RebootScheduler" /jffs/scripts/init-start; then
			echo "cru a amtm_RebootScheduler \"$rsm $rsh * * $rsdow service reboot\" # Added by $thisScript" >> /jffs/scripts/init-start
		fi
		cru a amtm_RebootScheduler "$rsm $rsh * * $rsdow service reboot"
		chmod 0755 /jffs/scripts/init-start

		show_amtm " Reboot scheduler enabled."

	elif [ "$1" = "remove" ]; then
		print_info_line
		printf " This removes the reboot scheduler.\\n"
		continue_dialog
		sed -i '\~amtm_RebootScheduler~d' /jffs/scripts/init-start
		cru d amtm_RebootScheduler
		show_amtm " Reboot scheduler removed."
	fi
}

install_Entware(){
	NAME="$thisScript Entware installer"
	check_entware_folder(){
		if [ "$(/opt/bin/find /tmp/mnt/*/ -maxdepth 1 -type d -name "entware*" 2>/dev/null | wc -l)" -gt "1" ]; then
			/opt/bin/find /tmp/mnt/*/ -maxdepth 1 -type d -name "entware*" | while read fdir; do
				if [ "$fdir" != "$(readlink /tmp/opt)" ] && [ -f "$fdir/bin/opkg" ]; then
					mv "$fdir" "$(dirname "$fdir")/old.$(basename "$fdir")"
				fi
			done
		fi
	}

	write_jffsfile(){
		check_nl(){ [ "$(tail -c1 "${1}"; echo x)" != "$'\nx'" ] && echo >>"${1}";}

		echo " Checking /jffs/scripts entries"

		if [ ! -f "/jffs/scripts/post-mount" ]; then
			echo "#!/bin/sh" >/jffs/scripts/post-mount
		elif [ -f "/jffs/scripts/post-mount" ] && ! head -1 /jffs/scripts/post-mount | grep -qE "^#!/bin/sh"; then
			sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/post-mount
		fi
		if ! grep -q ". /jffs/scripts/post-mount.div" /jffs/scripts/post-mount; then
			check_nl /jffs/scripts/post-mount
			echo ". /jffs/scripts/post-mount.div # Added by $NAME" >>/jffs/scripts/post-mount
			echo " post-mount entry added"
		else
			echo " OK post-mount"
		fi

		if [ ! -f "/jffs/scripts/services-stop" ]; then
			echo "#!/bin/sh" >/jffs/scripts/services-stop
		elif [ -f "/jffs/scripts/services-stop" ] && ! head -1 /jffs/scripts/services-stop | grep -qE "^#!/bin/sh"; then
			sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/services-stop
		fi
		if ! grep -q "/opt/etc/init.d/rc.unslung stop" /jffs/scripts/services-stop; then
			check_nl /jffs/scripts/services-stop
			echo "/opt/etc/init.d/rc.unslung stop # Added by $NAME" >>/jffs/scripts/services-stop
			echo " services-stop entry added"
		else
			echo " OK services-stop"
		fi

		if [ ! -f "/jffs/scripts/post-mount.div" ]; then
			cat <<-EOF > /jffs/scripts/post-mount.div
			#!/bin/sh

			# Added by $NAME

			OF="\$(/usr/bin/find \$1/entware*/bin/opkg 2> /dev/null)"

			if [ "\$OF" ]; then
				   ln -nsf "\$(echo "\$OF" | sed 's~/bin/opkg~~g')" /tmp/opt
				   /opt/etc/init.d/rc.unslung start \$0
			fi
			EOF
			echo " post-mount.div created"
		else
			echo " OK post-mount.div"
		fi
		chmod 0755 /jffs/scripts/post-mount /jffs/scripts/services-stop /jffs/scripts/post-mount.div
	}

	check_device(){

		check_device_nok(){
		rm -rf "$1/rw_test"
		show_amtm " $1\\n has not passed the device test.\\n Check if device is read and writable."
		}

		mkdir -p $1/rw_test
		if [ -d "$1/rw_test" ]; then
			echo "rwTest=OK" >"$1/rw_test/rw_test.txt"
			if [ -f "$1/rw_test/rw_test.txt" ]; then
				. "$1/rw_test/rw_test.txt"
				if [ "$rwTest" = "OK" ]; then
					rm -rf "$1/rw_test"
				else
					check_device_nok "$1"
				fi
			else
				check_device_nok "$1"
			fi
		else
			check_device_nok "$1"
		fi
	}

	case "$(uname -m)" in
		mips)		PART_TYPES='ext2|ext3'
					INST_URL='http://pkg.entware.net/binaries/mipsel/installer/installer.sh'
					entVer="Entware (mipsel)";;
		armv7l)		PART_TYPES='ext2|ext3|ext4'
					INST_URL='http://bin.entware.net/armv7sf-k2.6/installer/generic.sh'
					entVer="Entware (armv7)";;
		aarch64)	PART_TYPES='ext2|ext3|ext4'
					INST_URL='http://bin.entware.net/aarch64-k3.10/installer/generic.sh'
					entVer="Entware (aarch64)";;
		*)			show_amtm " $(uname -m) is an unsupported platform to install Entware on.";;
	esac

	echo " Running pre-install checks"

	if [ -L "/tmp/opt" ]; then
		# dl master check
		if [ "$(nvram get apps_mounted_path)" ] && [ -d "$(nvram get apps_mounted_path)/$(nvram get apps_install_folder)" ]; then
			if [ -f "/opt/etc/init.d/S50downloadmaster" ]; then
				echo "${ERR_BG} Download Master appears to be installed ${NC}"
				echo " $(nvram get apps_mounted_path)/$(nvram get apps_install_folder)"
				echo " Entware and Download Master cannot be installed at the same time."
				echo " Uninstall Download Master in 'USB Application' first."

				echo
				echo "${ERR_BG} Correct above error first before installing Entware ${NC}"
				press_enter_to acknowledge
				show_amtm " Correct error first before installing Entware."
			else
				echo "${ERR_BG} Correcting invalid Entware or Download Master settings ${NC}"
				if [ -L "/tmp/opt" ]; then
					rm -f /tmp/opt 2> /dev/null
					rm -f /opt 2> /dev/null
				fi
				if [ -d "$(nvram get apps_mounted_path)/$(nvram get apps_install_folder)" ]; then
					rm -rf "$(nvram get apps_mounted_path)/$(nvram get apps_install_folder)"
				fi
				nvram set apps_mounted_path=
				nvram set apps_dev=
				nvram set apps_state_autorun=
				nvram set apps_state_enable=
				nvram set apps_state_install=
				nvram set apps_state_switch=
				nvram commit
			fi
		else
			if [ -L "/tmp/opt" ]; then
				rm -f /tmp/opt 2> /dev/null
				rm -f /opt 2> /dev/null
			fi
			echo "${ERR_BG} Corrected invalid Entware symlink ${NC}"
		fi
	fi

	echo " Pre-install checks passed"

	print_end_line
	echo " Select device to install Entware to"
	echo

	i=1;noad=
	for mounted in $(/bin/mount | grep -E "$PART_TYPES" | cut -d" " -f3); do
		echo " $i. ${GREEN}$mounted${NC}"
		eval mounts$i="$mounted"
		noad="${noad}${i} "
		i=$((i+1))
	done

	if [ "$i" = "1" ]; then
		show_amtm " No compatible device(s) found to install\\n Entware on. A USB storage device formatted\\n with one of these file systems is required:\\n $(echo $PART_TYPES | sed -e 's/|/, /g')\\n Use Format disk (fd) to format FAT or NTFS\\n formatted devices to ext*."
	fi

	[ "$i" = "2" ] && devNo=1-1 || devNo="1-$((i-1))"
	while true; do
		printf "\\n Select device [$devNo e=Exit] ";read -r device
		case "$device" in
			[$noad])	break;;
			[Ee])		show_amtm " Exited Entware install function";break;;
			*)			printf "\\n input is not an option\\n";;
		esac
	done

	echo
	eval entDev="\$mounts$device"

	echo " Running device checks on $entDev"

	check_device "$entDev"

	echo " Device checks passed"

	if [ "$(uname -m)" = "aarch64" ]; then
		print_end_line
		printf " Select Entware version\\n\\n"
		printf " This router can run 32bit or 64bit Entware.\\n"
		printf " Unless you have a specific reason, the\\n"
		printf " 64-bit version is recommended.\\n\\n"
		printf " 1. 64-bit Entware\\n"
		printf " 2. 32-bit Entware\\n"
		while true; do
			printf "\\n Enter your selection [1-2] ";read -r eversion
			case "$eversion" in
				1)	INST_URL='http://bin.entware.net/aarch64-k3.10/installer/generic.sh'
					entVer="Entware (aarch64)";break;;
				2)	INST_URL='http://bin.entware.net/armv7sf-k3.2/installer/generic.sh'
					entVer="Entware (armv7)";break;;
				*) 	printf "\\n input is not an option\\n";;
			esac
		done
	fi

	print_end_line
	echo " amtm is now ready to install Entware to"
	echo
	echo " ${GREEN_BG} $entDev ${NC}"
	echo
	printf " 1. Continue\\n 2. Return to device selection\\n"
	while true; do
		printf "\\n Enter selection [1-2 e=Exit] ";read -r continue
		case "$continue" in
			1)		break;;
			2)		echo;install_Entware;break;;
			[Ee])	show_amtm " Exited Entware install function";;
			*)		printf "\\n input is not an option\\n";;
		esac
	done

	echo
	cd /tmp

	entPath="$entDev/entware"
	[ -d "$entPath" ] && rm -rf "$entPath"

	echo " Creating install directory at $entPath"

	mkdir -p "$entPath"

	ln -sf "$entPath" /tmp/opt

	echo
	echo " Installing $entVer, using external script"
	echo "${GRAY}"
	wget --timeout=10 --tries=3 --retry-connrefused -qO - "$INST_URL" | sh
	echo "${NC}"

	if [ -f "/opt/bin/opkg" ]; then
		ENTURL="$(awk 'NR == 1 {print $3}' /opt/etc/opkg.conf)"
		[ "$(echo $ENTURL | grep 'aarch64\|armv7\|mipsel')" ] && entVersion="Entware (${ENTURL##*/})"
		[ -z "$entVersion" ] && entVersion=$entVer
		check_entware_folder
		cd
		write_jffsfile
		show_amtm " $entVersion install successful."
	else
		cd
		show_amtm " $entVer install failed."
	fi
}

script_check(){
	ii=1
	[ "$localVother" ] && localver=$localVother || localver=$(grep "$scriptgrep" "$scriptloc"  | grep -m1 -oE 'v[0-9]{1,2}([.][0-9]{1,2})([.][0-9]{1,2})')
	upd="${NC}$localver${NC} "
	if [ "$su" = "1" ]; then
		if curl -fsL --retry 3 "$remoteurl" | grep -qF "$grepcheck"; then
			[ "$remoteVother" ] && remotever=$remoteVother || remotever="$(curl -fsL --retry 3 "$remoteurl" | grep "$scriptgrep" | grep -m1 -oE 'v[0-9]{1,2}([.][0-9]{1,2})([.][0-9]{1,2})')"
			upd="${ERR_BG}no upd${NC}"
			if [ "$localver" != "$remotever" ]; then
				upd="${GREEN_BG}-> $remotever${NC}"
				suUpd=1
			else
				localmd5="$(md5sum "$scriptloc" | awk '{print $1}')"
				remotemd5="$(curl -fsL --retry 3 "$remoteurl" | md5sum | awk '{print $1}')"
				if [ "$localmd5" != "$remotemd5" ]; then
					upd="${GREEN_BG}-> min upd${NC}"
					suUpd=1
				fi
			fi
		else
			upd=" ${ERR_BG}upd err${NC}"
		fi
	else
		localver=
	fi
}

show_amtm(){
	clear
	divconf=/opt/share/diversion/.conf/diversion.conf
	if [ -f "$divconf" ]; then
		theme="$(grep "THEME=" "$divconf" | sed -e 's/THEME=//')"
		[ -z "$theme" ] && theme=standard
		divver="$(grep "thisVERSION=" "$divconf" | sed -e 's/thisVERSION=//')"
		divMver="$(grep "thisM_VERSION=" "$divconf" | sed -e 's/thisM_VERSION=//')"
		[ "$divMver" ] && divver="${divver}.$divMver" || divver=$divver
		. /opt/share/diversion/file/theme.div
	else
		theme=standard
	fi
	theme_$theme

	if [ -d "/opt/bin" ] && [ ! -L "/opt/bin/$thisScript" ] && [ -f "/jffs/scripts/$thisScript" ]; then
		ln -s /jffs/scripts/$thisScript /opt/bin
		chmod 0755 /opt/bin/$thisScript
		rcotext=" /opt/bin detected!\\n You can now start $thisScript with:\\n $thisScript"
		if [ -z "$1" ] || [ "$1" = "menu" ]; then
			set -- "$rcotext"
		else
			set -- "$1\\n\\n$rcotext"
		fi
	fi

	printf "${RED_BG}%-27s%s\\n" " $thisScript $version" "by thelonelycoder ${NC}"

	[ -z "$(nvram get odmpid)" ] && model="$(nvram get productid)" || model="$(nvram get odmpid)"
	echo " $model ($(uname -m)) FW-$(nvram get buildno) @ $(nvram get lan_ipaddr)"

	echo "${RED_BG} The ${title}   ${NC}"
	echo

	# SNBForum scripts follow

	# 1 Diversion menu
	scriptloc="/opt/bin/diversion"
	if [ -f "$scriptloc" ]; then
		case "$release" in
			*XX*) 	remoteurl="http://diversion.test/diversion"
					if ! ping -c1 -W2 -q "$(echo $remoteurl | sed 's#http[s]*://##;s#/.*##')" >/dev/null 2>&1; then
						remoteurl="https://diversion.ch/diversion"
					fi;;
			*) 		remoteurl="https://diversion.ch/diversion";;
		esac
		ii=1
		localver="v$divver"
		upd="${NC}$localver${NC} "
		if [ "$su" = "1" ]; then
			if curl -fsN --retry 3 "$remoteurl/diversion.info" | grep -q "^S_VERSION=\|^S_M_VERSION="; then
				remotever="$(curl -fsN --retry 3 "$remoteurl/diversion.info" | grep "^S_VERSION=\|^S_M_VERSION=" | sed -e 's/.*_VERSION=//')"
				S_VERSION=$(echo $remotever | awk '{print $1}')
				S_M_VERSION=$(echo $remotever | awk '{print $2}')
				[ "$S_M_VERSION" ] && remotever="v${S_VERSION}.$S_M_VERSION" || remotever="v$S_VERSION"
				upd="${ERR_BG}no upd${NC}"
				if [ "$localver" != "$remotever" ]; then
					upd="${GREEN_BG}-> $remotever${NC}"
					suUpd=1
				else
					localmd5="$(md5sum "$scriptloc" | awk '{print $1}')"
					remotemd5="$(curl -fsL --retry 3 "$remoteurl/$S_VERSION/diversion" | md5sum | awk '{print $1}')"
					if [ "$localmd5" != "$remotemd5" ]; then
						upd="${GREEN_BG}-> min upd${NC}"
						suUpd=1
					fi
				fi
			else
				upd=" ${ERR_BG}upd err${NC}"
			fi
		else
			localver=
		fi
		printf "${GREEN_BG} 1 ${NC} %-9s%-20s%21s\\n" "open" "Diversion $localver" " $upd"
		case_1(){
			/opt/bin/diversion
			sleep 2
			show_amtm menu
		}
	else
		[ "$ss" ] && printf "${ERR_BG} 1 ${NC} %-9s%s\\n" "install" "Diversion"
		case_1(){
			print_info_line
			echo " This installs Diversion,"
			echo " the Router Adblocker."
			echo
			echo " Author: thelonelycoder"
			echo " https://www.snbforums.com/threads/diversion-the-router-adblocker.48538/"
			continue_dialog
			case "$release" in
				*XX*) 	remoteurl="http://diversion.test/install"
						if ! ping -c1 -W2 -q "$(echo $remoteurl | sed 's#http[s]*://##;s#/.*##')" >/dev/null 2>&1; then
							remoteurl="https://diversion.ch/install"
						fi;;
				*) 		remoteurl="https://diversion.ch/install";;
			esac
			curl -Os "$remoteurl" && sh install
			sleep 2
			show_amtm " Diversion installed."
		}
	fi

	# 2 Skynet menu
	scriptloc="/jffs/scripts/firewall"
	if [ -f "$scriptloc" ] && grep -qE "sh /jffs/scripts/firewall .* # Skynet" /jffs/scripts/firewall-start 2> /dev/null; then
		remoteurl="https://raw.githubusercontent.com/Adamm00/IPSet_ASUS/master/firewall.sh"
		scriptgrep='.*'
		grepcheck=Adamm
		script_check
		printf "${GREEN_BG} 2 ${NC} %-9s%-20s%21s\\n" "open" "Skynet $localver" " $upd"
		case_2(){
			/jffs/scripts/firewall
			sleep 2
			show_amtm menu
		}
	else
		[ "$ss" ] && printf "${ERR_BG} 2 ${NC} %-9s%s\\n" "install" "Skynet"
		case_2(){
			print_info_line
			echo " This installs Skynet on your router."
			echo
			echo " Author: Adamm"
			echo " https://www.snbforums.com/threads/release-skynet-router-firewall-security-enhancements.16798/"
			continue_dialog

			if ! ipset -v | grep -qF "v6"; then
				show_amtm " Skynet install failed,\\n IPSet version on router not supported:\\n\\n$(ipset -v | sed -e 's/^/ /')"
			fi

			curl --retry 3 "https://raw.githubusercontent.com/Adamm00/IPSet_ASUS/master/firewall.sh" -o "/jffs/scripts/firewall" && chmod +x /jffs/scripts/firewall && sh /jffs/scripts/firewall install
			sleep 2
			show_amtm " Skynet installed."
		}
	fi

	# 3 Stubby-Installer-Asuswrt-Merlin menu (deprecated)
	scriptloc="/jffs/scripts/install_stubby.sh"
	if [ -f "$scriptloc" ] && [ -f "/opt/etc/stubby/stubby.yml" ]; then
		localVother="v$(grep "VERSION=" "$scriptloc" | sed -e 's/VERSION=//;s/"//g')"
		remoteurl="https://raw.githubusercontent.com/Xentrk/Stubby-Installer-Asuswrt-Merlin/master/install_stubby.sh"
		remoteVother="v$(curl -fsL --retry 3 "$remoteurl" | grep "VERSION=" | sed -e 's/VERSION=//;s/"//g')"
		grepcheck=Xentrk
		script_check
		localVother=
		remoteVother=
		printf "${GREEN_BG} 3 ${NC} %-9s%-20s%21s\\n" "open" "Stubby DNS $localver" " $upd"
		case_3(){
			/jffs/scripts/install_stubby.sh
			sleep 2
			show_amtm menu
		}
	elif [ -z "$(nvram get rc_support | tr ' ' '\n' | grep dnspriv)" ] && [ -z "$(nvram get rc_support | tr ' ' '\n' | grep stubby)" ]; then
		[ "$ss" ] && printf "${ERR_BG} 3 ${NC} %-9s%s\\n" "install" "Stubby DNS"
		case_3(){
			print_info_line
			echo " This installs Stubby DNS Privacy Daemon"
			echo " on your router."
			echo
			echo " Authors: Xentrk, Adamm"
			echo " https://www.snbforums.com/threads/stubby-installer-asuswrt-merlin.49469/"
			continue_dialog

			if [ -d "/jffs/dnscrypt" ] || [ -f "/opt/sbin/dnscrypt-proxy" ]; then
				show_amtm " Stubby DNS install failed. It is not\\n compatible with dnscrypt installer which\\n is installed on this router."
			fi

			curl --retry 3 "https://raw.githubusercontent.com/Xentrk/Stubby-Installer-Asuswrt-Merlin/master/install_stubby.sh" -o "/jffs/scripts/install_stubby.sh" && chmod 755 /jffs/scripts/install_stubby.sh && sh /jffs/scripts/install_stubby.sh
			sleep 2
			show_amtm " Stubby DNS installed."
		}
	else
		case_3(){
			show_amtm " Stubby DNS is not available to install. This\\n router supports native DoT, use that instead."
		}
	fi

	[ "$upd" ] || [ "$ss" ] && echo
	upd=

	# 4 YazFi menu
	scriptloc="/jffs/scripts/YazFi"
	if [ -f "$scriptloc" ] && [ -f "/jffs/configs/YazFi/YazFi.config" ]; then
		remoteurl="https://raw.githubusercontent.com/jackyaz/YazFi/master/YazFi.sh"
		scriptgrep='YAZFI_VERSION='
		grepcheck=jackyaz
		script_check
		printf "${GREEN_BG} 4 ${NC} %-9s%-20s%21s\\n" "open" "YazFi $localver" " $upd"
		case_4(){
			/jffs/scripts/YazFi
			sleep 2
			show_amtm menu
		}
	else
		[ "$ss" ] && printf "${ERR_BG} 4 ${NC} %-9s%s\\n" "install" "YazFi enhanced guest WiFi"
		case_4(){
			print_info_line
			echo " This installs YazFi - enhanced AsusWRT-Merlin Guest WiFi Networks"
			echo " on your router."
			echo
			echo " Author: Jack Yaz"
			echo " https://www.snbforums.com/threads/yazfi-enhanced-asuswrt-merlin-guest-wifi-inc-ssid-vpn-client.45924/"
			continue_dialog
			curl --retry 3 "https://raw.githubusercontent.com/jackyaz/YazFi/master/YazFi.sh" -o "/jffs/scripts/YazFi" && chmod 0755 /jffs/scripts/YazFi && /jffs/scripts/YazFi install
			sleep 2
			show_amtm " YazFi installed."
		}
	fi

	[ "$upd" ] || [ "$ss" ] && echo
	upd=

	# j1 connmon menu
	scriptloc="/jffs/scripts/connmon"
	if [ -f "$scriptloc" ] && grep -q 'connmon startup' /jffs/scripts/services-start; then
		remoteurl="https://raw.githubusercontent.com/jackyaz/connmon/master/connmon.sh"
		scriptgrep='CONNMON_VERSION='
		grepcheck=jackyaz
		script_check
		printf "${GREEN_BG} j1${NC} %-9s%-20s%21s\\n" "open" "connmon $localver" " $upd"
		case_j1(){
			/jffs/scripts/connmon
			sleep 2
			show_amtm menu
		}
	else
		[ "$ss" ] && printf "${ERR_BG} j1${NC} %-9s%s\\n" "install" "connmon Internet uptime monitor"
		case_j1(){
			print_info_line
			echo " This installs connmon- Internet connection monitoring"
			echo " on your router."
			echo
			echo " Author: Jack Yaz"
			echo " https://www.snbforums.com/threads/connmon-internet-connection-monitoring.56163/"
			continue_dialog

			curl --retry 3 "https://raw.githubusercontent.com/jackyaz/connmon/master/connmon.sh" -o "/jffs/scripts/connmon" && chmod 0755 /jffs/scripts/connmon && /jffs/scripts/connmon install
			sleep 2
			show_amtm " connmon installed."
		}
	fi

	# j2 ntpMerlin menu
	scriptloc="/jffs/scripts/ntpmerlin"
	if [ -f "$scriptloc" ] && grep -q 'ntpmerlin startup' /jffs/scripts/services-start; then
		remoteurl="https://raw.githubusercontent.com/jackyaz/ntpMerlin/master/ntpmerlin.sh"
		scriptgrep='NTPD_VERSION='
		grepcheck=jackyaz
		script_check
		printf "${GREEN_BG} j2${NC} %-9s%-20s%21s\\n" "open" "ntpMerlin $localver" " $upd"
		case_j2(){
			/jffs/scripts/ntpmerlin
			sleep 2
			show_amtm menu
		}
	else
		[ "$ss" ] && printf "${ERR_BG} j2${NC} %-9s%s\\n" "install" "ntpMerlin NTP Daemon"
		case_j2(){
			print_info_line
			echo " This installs ntpMerlin - Installer for kvic NTP Daemon"
			echo " on your router."
			echo
			echo " Author: Jack Yaz"
			echo " https://www.snbforums.com/threads/ntpmerlin-installer-for-kvic-ntp-daemon.55756/"
			continue_dialog

			curl --retry 3 "https://raw.githubusercontent.com/jackyaz/ntpMerlin/master/ntpmerlin.sh" -o "/jffs/scripts/ntpmerlin" && chmod 0755 /jffs/scripts/ntpmerlin && /jffs/scripts/ntpmerlin install
			sleep 2
			show_amtm " ntpMerlin installed."
		}
	fi

	# j3 scMerlin menu
	scriptloc="/jffs/scripts/scmerlin"
	if [ -f "$scriptloc" ]; then
		remoteurl="https://raw.githubusercontent.com/jackyaz/scMerlin/master/scmerlin.sh"
		scriptgrep='SCM_VERSION='
		grepcheck=jackyaz
		script_check
		printf "${GREEN_BG} j3${NC} %-9s%-20s%21s\\n" "open" "scMerlin $localver" " $upd"
		case_j3(){
			/jffs/scripts/scmerlin
			sleep 2
			show_amtm menu
		}
	else
		[ "$ss" ] && printf "${ERR_BG} j3${NC} %-9s%s\\n" "install" "scMerlin Quick access control"
		case_j3(){
			print_info_line
			echo " This installs scMerlin - service and script control menu for AsusWRT-Merlin"
			echo " on your router."
			echo
			echo " Author: Jack Yaz"
			echo " https://www.snbforums.com/threads/scmerlin-service-and-script-control-menu-for-asuswrt-merlin.56277/"
			continue_dialog

			curl --retry 3 "https://raw.githubusercontent.com/jackyaz/scmerlin/master/scmerlin.sh" -o "/jffs/scripts/scmerlin" && chmod 0755 /jffs/scripts/scmerlin && /jffs/scripts/scmerlin install
			sleep 2
			show_amtm " scMerlin installed."
		}
	fi

	# j4 spdMerlin menu
	scriptloc="/jffs/scripts/spdmerlin"
	if [ -f "$scriptloc" ] && grep -q 'spdmerlin startup' /jffs/scripts/services-start; then
		remoteurl="https://raw.githubusercontent.com/jackyaz/spdMerlin/master/spdmerlin.sh"
		scriptgrep='SPD_VERSION='
		grepcheck=jackyaz
		script_check
		printf "${GREEN_BG} j4${NC} %-9s%-20s%21s\\n" "open" "spdMerlin $localver" " $upd"
		case_j4(){
			/jffs/scripts/spdmerlin
			sleep 2
			show_amtm menu
		}
	else
		[ "$ss" ] && printf "${ERR_BG} j4${NC} %-9s%s\\n" "install" "spdMerlin Automatic speedtest"
		case_j4(){
			print_info_line
			echo " This installs spdMerlin - Automatic speedtest for AsusWRT Merlin - with graphs"
			echo " on your router."
			echo
			echo " Author: Jack Yaz"
			echo " https://www.snbforums.com/threads/spdmerlin-automated-speedtests-with-graphs.55904/"
			continue_dialog

			curl --retry 3 "https://raw.githubusercontent.com/jackyaz/spdMerlin/master/spdmerlin.sh" -o "/jffs/scripts/spdmerlin" && chmod 0755 /jffs/scripts/spdmerlin && /jffs/scripts/spdmerlin install
			sleep 2
			show_amtm " spdMerlin installed."
		}
	fi

	[ "$upd" ] || [ "$ss" ] && echo
	upd=

	# di dnscrypt installer menu (deprecated)
	if [ -d /jffs/dnscrypt ]; then
		ii=1
		upd=" "
		printf "${GREEN_BG} di${NC} %-9s%s\\n" "open" "dnscrypt installer"
		case_di(){
			printf "\\n dnscrypt installer menu:\\n\\n"
			curl -L -s -k -O https://raw.githubusercontent.com/thuantran/dnscrypt-asuswrt-installer/master/installer && sh installer ; rm installer
			show_amtm menu
		}
	else
		case_di(){
			show_amtm " dnscrypt installer is deprecated and no\\n longer available for install."
		}
	fi

	# ew Entware menu
	if [ -f "/opt/bin/opkg" ]; then
		ii=1
		upd=" "
		printf "${GREEN_BG} ew${NC} %-9s%s\\n" "update" "Entware"
		case_ew(){
			print_info_line
			echo " This updates and upgrades Entware packages"
			if [ -f "/opt/bin/diversion" ]; then
				echo
				echo " Note: Diversion is installed on this router."
				echo " It's recommended to update Entware packages"
				echo " in Diversion using the ${RED_BG} ep ${NC} option."
				echo " Especially so when pixelserv-tls is installed."
			fi
			if [ -f "/jffs/scripts/install_stubby.sh" ] && [ -f "/opt/etc/stubby/stubby.yml" ]; then
				echo
				echo " Note: Stubby DNS Privacy Daemon is installed"
				echo " on this router."
				echo " It's recommended to update Entware packages"
				echo " selectively through the Stubby DNS menu to"
				echo " prevent overwriting configuration files."
			fi
			continue_dialog
			opkg update
			opkg upgrade
			show_amtm " Entware packages updated and upgraded."
		}
	else
		[ "$ss" ] && printf "${ERR_BG} ew${NC} %-9s%s\\n" "install" "Entware"
		case_ew(){
			print_info_line
			echo " This installs Entware on this router."
			echo
			echo " Note: If you plan to install Diversion on"
			echo " this router, install Diversion first,"
			echo " it includes the installation of Entware."
			echo
			echo " Author: thelonelycoder"
			continue_dialog
			install_Entware
			sleep 2
			show_amtm menu
		}
	fi

	# ps pixelserv-tls menu
	if [ -L "/opt/bin/pixelserv-tls" ]; then
		ii=1
		beta=" beta"
		psVersionm=
		psVersion="$(pixelserv-tls -v | awk 'NR == 1 {print $2}')"
		[ -z "$psVersion" ] && psVersion="likely v.Kk"
		case $psVersion in
		  v*|*v.K*) ;;
		  * ) psVersion="v$psVersion" ;;
		esac
		upd="${NC}$psVersion${NC} "
		if [ -z "$(pidof pixelserv-tls)" ]; then
			upd=
			psVersionm="$psVersion ${ERR_BG}(not running)${NC}"
		fi
		printf "${GREEN_BG} ps${NC} %-9s%-20s%21s\\n" "remove" "pixelserv-tls$beta $psVersionm" " $upd"
		case_ps(){
			print_info_line
			echo " This removes the pixelserv-tls beta and"
			echo " installs the latest release version"
			echo " available trough Entware."
			echo
			echo " No beta versions are available at the moment from its author kvic."
			echo " https://www.snbforums.com/threads/pixelserv-a-better-one-pixel-webserver-for-adblock.26114/"
			print_end_line
			echo
			echo " 1. Remove pixelserv-tls beta version"
			while true; do
				printf "\\n Enter selection [1-1 e=Exit] ";read -r continue
				case "$continue" in
					1)		echo
							opkg --force-reinstall install pixelserv-tls
							rm -rf /opt/tmp/pixelserv-tls-beta
							echo
							echo "pixelserv-tls beta removed, restarting Diversion services"
							diversion sh-restart
							echo
							sleep 1
							show_amtm " pixelserv-tls beta removed.";break;;
					[Ee])	show_amtm menu;break;;
					*)		printf "\\n input is not an option\\n";;
				esac
			done
		}
	else
		case_ps(){
			show_amtm " No pixelserv-tls beta versions are available\\n at the moment from its author kvic."
		}
	fi

	# amtm tools follow
	[ "$upd" ] || [ "$ss" ] && echo
	upd=

	# Disk check
	if [ -f "/jffs/scripts/disk-check" ] && grep -qE "/jffs/scripts/disk-check # Added by" /jffs/scripts/pre-mount; then
		ii=1
		case_dc(){
			disk_check remove
			show_amtm menu
		}
		if ! grep -qE "VERSION=$dc_version" /jffs/scripts/disk-check; then
			write_dc_file
			dctext=" Disk check script auto-updated to v$dc_version"
			if [ -z "$1" ] || [ "$1" = "menu" ]; then
				set -- "$dctext"
			else
				set -- "$1\\n\\n$dctext"
			fi
		fi
		[ -f "/jffs/amtm-disk-check.log" ] && dcltext="${GREEN_BG}dcl${NC} show log" || dcltext=
		printf "${GREEN_BG} dc${NC} %-9s%-19s%21s\\n" "remove" "Disk check script" " $dcltext"

	else
		[ "$ss" ] && printf "${ERR_BG} dc${NC} %-9s%s\\n" "install" "Disk check script"
		case_dc(){
			print_info_line
			echo " This installs /jffs/scripts/disk-check."
			echo " It runs a filesystem check on compatible"
			echo " USB storage devices before they are mounted."
			echo
			echo " Authors: ColinTaylor, latenitetech, thelonelycoder"
			echo " https://github.com/RMerl/asuswrt-merlin/wiki/USB-Disk-Check-at-Boot-or-Hot-Plug-(improved-version)"
			echo " https://github.com/RMerl/asuswrt-merlin/wiki/USB-Disk-Check-at-Boot"
			continue_dialog
			disk_check install
			show_amtm " Disk check script installed.\\n The check log can be viewed directly\\n in amtm with dcl."
		}
	fi

	# Format disk
	if [ -f "/jffs/amtm-format-disk.log" ]; then
		ii=1
		printf "${GREEN_BG} fd${NC} %-9s%s\\n" "run" "Format disk         ${GREEN_BG}fdl${NC} show log"
	else
		[ "$ss" ] && printf "${GREEN_BG} fd${NC} %-9s%s\\n" "run" "Format disk"
	fi

	case_fd(){
		print_info_line
		echo " This (re)formats your plugged in USB storage"
		echo " device to ext* filesystem.  The process"
		echo " erases all data and partitions on the device."
		echo " After formatting, the router will reboot."
		echo
		echo " To be on the safe side, remove all other"
		echo " attached USB devices before continuing."
		echo
		echo " Authors: Zonkd, ColinTaylor, thelonelycoder"
		echo " https://github.com/RMerl/asuswrt-merlin/wiki/Disk-formatting"
		echo " https://www.snbforums.com/threads/ext4-disk-formatting-options-on-the-router.48302/page-2#post-455723"
		continue_dialog
		format_disk
	}

	# rs Reboot scheduler
	if [ -f "/jffs/scripts/init-start" ] && grep -qE "amtm_RebootScheduler" /jffs/scripts/init-start; then
		ii=1
		rstext=$(grep -o "amtm_RebootScheduler .*" /jffs/scripts/init-start 2>/dev/null | awk '{print $6" @ "$3":"$2}' | sed -e 's/"//')
		[ "$(echo $rstext | grep -o ':.*' | wc -m)" -lt "4" ] && rstext=$(echo $rstext | sed -e 's/:/:0/')
		printf "${GREEN_BG} rs${NC} %-9s%s\\n" "remove" "Reboot scheduler ${GREEN_BG}${rstext}${NC}"

		case_rs(){
			reboot_scheduler remove
		}
	else
		[ "$ss" ] && printf "${ERR_BG} rs${NC} %-9s%s\\n" "enable" "Reboot scheduler"

		case_rs(){
			print_info_line
			echo " This enables the reboot scheduler for your"
			echo " router."
			echo " The scheduler is set with a cron job via"
			echo " init-start, as opposed to the WebUI setting"
			echo " which uses an internal mechanism to reboot."
			echo
			echo " Author: thelonelycoder"
			continue_dialog
			reboot_scheduler install
		}
	fi

	# sw/swp/swap Swap file
	writeswaploc(){
		sed -i '\~swapon ~d' /jffs/scripts/post-mount
		sed -i "2i swapon $swaplocation # Swap file created by $NAME" /jffs/scripts/post-mount
		swapon "$swaplocation" 2> /dev/null
	}
	swaplocation="$(grep -E "^swapon " /jffs/scripts/post-mount | awk '{print $2}')"
	swtext=
	if [ -f "$swaplocation" ]; then
		if ! grep -qF "$swaplocation" /proc/swaps; then
			swapon "$swaplocation" 2> /dev/null
			swtext=" Swap file re-enabled"
		fi
	elif [ "$swaplocation" ]; then
		swaplocation="$(find /tmp/mnt/*/$(basename $swaplocation) 2> /dev/null)"
		if [ -f "$swaplocation" ]; then
			writeswaploc
			swtext=" Swap file path corrected in\\n /jffs/scripts/post-mount"
		else
			swaplocation="$(find /tmp/mnt/*/myswap.swp 2> /dev/null)"
			if [ -f "$swaplocation" ]; then
				writeswaploc
				swtext=" Added missing swap file entry to\\n /jffs/scripts/post-mount"
			elif [ "$(wc -l < /proc/swaps)" -ge "2" ]; then
				swaplocation="$(sed -n '2p' /proc/swaps | awk '{print $1}')"
				if [ -f "$swaplocation" ]; then
					writeswaploc
					swtext=" Added missing swap file entry to\\n /jffs/scripts/post-mount"
				else
					sed -i '\~swapon ~d' /jffs/scripts/post-mount
					swtext=" No swap file found, reference removed in\\n /jffs/scripts/post-mount"
				fi
			else
				sed -i '\~swapon ~d' /jffs/scripts/post-mount
				swtext=" No swap file found, reference removed in\\n /jffs/scripts/post-mount"
			fi
		fi
	else
		swaplocation="$(find /tmp/mnt/*/myswap.swp 2> /dev/null)"
		if [ -f "$swaplocation" ]; then
			writeswaploc
			swtext=" Added missing swap file entry to\\n /jffs/scripts/post-mount"
		elif [ "$(wc -l < /proc/swaps)" -ge "2" ]; then
			swaplocation="$(sed -n '2p' /proc/swaps | awk '{print $1}')"
			if [ -f "$swaplocation" ]; then
				writeswaploc
				swtext=" Added missing swap file entry to\\n /jffs/scripts/post-mount"
			else
				sed -i '\~swapon ~d' /jffs/scripts/post-mount
				swtext=" No swap file found, reference removed in\\n /jffs/scripts/post-mount"
			fi
		elif [ "$swaplocation" ]; then
			swtext=" Multiple swap files found, only one file is\\n supported. Run ${GREEN_BG}sw${NC} to delete."
		fi
	fi
	if [ "$swtext" ]; then
		if [ -z "$1" ] || [ "$1" = "menu" ]; then
			set -- "$swtext"
		else
			set -- "$1\\n\\n$swtext"
		fi
	fi
	if [ -f "$swaplocation" ]; then
		ii=1
		printf "${GREEN_BG} sw${NC} %-9s%s ${GREEN_BG}%s${NC}\\n" "delete" "Swap file" "$(echo "${swaplocation#/tmp}" | sed 's|/myswap.swp||')"
		case_swp(){
			manage_swap delete
		}
	elif [ "$swaplocation" ]; then
		ii=1
		printf "${GREEN_BG} sw${NC} %-9s%s ${GREEN_BG}%s${NC}\\n" "delete" "Swap files"
		case_swp(){
			manage_swap multidelete
		}
	else
		[ "$ss" ] && printf "${ERR_BG} sw${NC} %-9s%s\\n" "create" "Swap file"
		case_swp(){
			manage_swap create
		}
	fi

	[ "$ii" ] || [ "$ss" ] && echo

	# su check for script updates
	[ "$ii" ] && printf "${GREEN_BG} su${NC} %-9s%s\\n" "check" "for script updates"

	# i show available scripts to install
	if [ "$ss" ]; then
		printf "${GREEN_BG} i ${NC} %-9s%s\\n" "hide" "inactive scripts or tools"
	else
		printf "${GREEN_BG} i ${NC} %-9s%s\\n" "install" "scripts or tools"
	fi

	# amtm menu
	echo
	echo "    amtm options"
	[ -f "/jffs/scripts/$thisScript" ] || [ -f "/opt/bin/$thisScript" ] && thisopt="${GREEN_BG} r ${NC} remove"  || thisopt="${GREEN_BG} i ${NC} install"
	echo "${GREEN_BG} e ${NC} exit   ${GREEN_BG} u ${NC} update   $thisopt  ${GREEN_BG} a ${NC} about"

	# The notification area. $1 can be passed on as positional parameter
	[ "$ss" ] && ssi=1 || ssi=
	ss=;ii=
	if [ "$su" = "1" ]; then
		su=
		[ "$suUpd" = "1" ] && set -- " Script update(s) are available!" || set -- " No script update(s) available"
	fi
	if [ "$1" = "menu" ]; then
		print_end_line
	else
		print_info_line
		printf "$1\\n"
		print_end_line
	fi

	while true; do
		printf "${RED_BG} Enter option ${NC} ";read -r selection
		case "$selection" in
			1)			case_1;break;;
			2)			case_2;break;;
			3)			case_3;break;;
			4)			case_4;break;;
			j1)			case_j1;break;;
			j2)			case_j2;break;;
			j3)			case_j3;break;;
			j4)			case_j4;break;;
			[Ii])		[ "$ssi" ] && ss= || ss=1
						show_amtm menu;break;;
			di)			case_di;break;;
			ew)			case_ew;break;;
			ps)			case_ps;break;;
			[Ss][Uu])	su=1;suUpd=0;show_amtm menu;break;;
			[Dd][Cc])	case_dc;break;;
			dcl)		disk_check log
						show_amtm menu;break;;
			[Ff][Dd])	case_fd;break;;
			fdl)		format_disk_log;break;;
			rs)			case_rs;break;;
			swap|swp|sw)case_swp;break;;
			[Uu])		update_amtm;break;;
			[Rr])		remove_amtm;break;;
			[Aa])		about_amtm;break;;
			[Ee])		clear
						ascii_logo
						printf "   Goodbye\\n\\n"
						exit 0;break;;
			11)			exec "$0";break;; # hidden dev option
			reboot)		print_info_line # hidden, reboot router
						echo " OK then, rebooting this router, are you sure?"
						continue_dialog
						clear
						ascii_logo
						printf " $thisScript reboots this router now\\n\\n"
						sleep 1
						service reboot >/dev/null 2>&1 &
						exit 0
						break;;
			*)			printf "\\n               input is not an option\\n\\n";;
		esac
	done
}

# asks to install, auto-update, show menu or pass along positional parameter
if [ ! -f "/jffs/scripts/$thisScript" ]; then
	install_amtm
elif ! cmp -s "$0" "/jffs/scripts/$thisScript"; then
	cp -f "$0" /jffs/scripts/$thisScript
	chmod 0755 /jffs/scripts/$thisScript
	if [ "$0" = "/jffs/scripts/$thisScript" ]; then
		subshell=
	else
		subshell="exec"
		rm -f "$0"
	fi
	"$subshell" /jffs/scripts/$thisScript " $thisScript auto-update applied (v$version)"
elif [ -z "$1" ]; then
	show_amtm menu
else
	show_amtm "$1"
fi

#eof
